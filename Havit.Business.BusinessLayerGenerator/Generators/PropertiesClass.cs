using System.Text;
using Havit.Business.BusinessLayerGenerator.Csproj;
using Havit.Business.BusinessLayerGenerator.Helpers;
using Havit.Business.BusinessLayerGenerator.Helpers.NamingConventions;
using Havit.Business.BusinessLayerGenerator.Helpers.Types;
using Havit.Business.BusinessLayerGenerator.Writers;
using Microsoft.SqlServer.Management.Smo;

namespace Havit.Business.BusinessLayerGenerator.Generators;

public static class PropertiesClass
{
	public static void Generate(Table table, CsprojFile csprojFile)
	{
		RenameObsoleteFileIfExists(table, csprojFile);

		string fileName = FileHelper.GetFilename(table, "Properties.cs", FileHelper.GeneratedFolder);

		if (csprojFile != null)
		{
			csprojFile.Ensures(fileName);
		}

		CodeWriter writer = new CodeWriter(FileHelper.ResolvePath(fileName));

		Autogenerated.WriteAutogeneratedNoCodeHere(writer);

		BusinessObjectUsings.WriteUsings(writer);
		writer.WriteLine(String.Format("namespace {0}", NamespaceHelper.GetNamespaceName(table)));
		writer.WriteLine("{");

		writer.WriteCommentSummary(String.Format("Objektová reprezentace metadat vlastností typu {0}.", ClassHelper.GetClassName(table)));
		writer.WriteMicrosoftContract(ContractHelper.GetContractVerificationAttribute(false));
		writer.WriteGeneratedCodeAttribute();
		writer.WriteLine(String.Format("{0} class {1}",
			TableHelper.GetAccessModifier(table),
			ClassHelper.GetPropertiesClassName(table)));
		writer.WriteLine("{");

		writer.WriteCommentSummary("Konstruktor.");
		writer.WriteLine(String.Format("public {0}()", ClassHelper.GetPropertiesClassName(table)));
		writer.WriteLine("{");

		StringBuilder propertiesBuilder = new StringBuilder();

		foreach (Column column in TableHelper.GetNotIgnoredColumns(table))
		{
			if (!TypeHelper.IsBusinessObjectReference(column))
			{
				writer.WriteLine(String.Format("_{0} = new FieldPropertyInfo();", ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column))));
			}
			else
			{
				writer.WriteLine(String.Format("_{0} = new ReferenceFieldPropertyInfo();", ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column))));
			}

			if (propertiesBuilder.Length > 0)
			{
				propertiesBuilder.Append(", ");
			}
			propertiesBuilder.Append("_");
			propertiesBuilder.Append(ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column)));
		}

		foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
		{
			writer.WriteLine(String.Format("_{0} = new CollectionPropertyInfo();", ConventionsHelper.GetCammelCase(collectionProperty.PropertyName)));

			if (propertiesBuilder.Length > 0)
			{
				propertiesBuilder.Append(", ");
			}
			propertiesBuilder.Append("_");
			propertiesBuilder.Append(ConventionsHelper.GetCammelCase(collectionProperty.PropertyName));
		}

		writer.WriteLine(String.Format("_all = new PropertyInfoCollection({0});", propertiesBuilder.ToString()));

		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteCommentSummary("Inicializuje hodnoty metadat.");
		writer.WriteLine("public void Initialize(ObjectInfo objectInfo)");
		writer.WriteLine("{");

		foreach (Column column in TableHelper.GetNotIgnoredColumns(table))
		{
			int maximumLength = ColumnHelper.GetColumnMaximumLength(column);

			if (!TypeHelper.IsBusinessObjectReference(column))
			{
				writer.WriteLine(String.Format("_{0}.Initialize(objectInfo, \"{1}\", \"{2}\", {3}, SqlDbType.{4}, {5}, {6});",
					ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column)),
					PropertyHelper.GetPropertyName(column),
					column.Name,
					column.InPrimaryKey.ToString().ToLower(),
					TypeHelper.ToSqlDbType(column.DataType).ToString(),
					column.Nullable.ToString().ToLower(),
					maximumLength));
			}
			else
			{
				writer.WriteLine(String.Format("_{0}.Initialize(objectInfo, \"{1}\", \"{2}\", {3}, SqlDbType.{4}, {5}, {6}, typeof({7}), {7}.ObjectInfo);",
					ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column)),
					PropertyHelper.GetPropertyName(column),
					column.Name,
					column.InPrimaryKey.ToString().ToLower(),
					TypeHelper.ToSqlDbType(column.DataType).ToString(),
					column.Nullable.ToString().ToLower(),
					maximumLength,
					TypeHelper.GetPropertyTypeName(column)));
			}

			if (propertiesBuilder.Length > 0)
			{
				propertiesBuilder.Append(", ");
			}
			propertiesBuilder.Append("_");
			propertiesBuilder.Append(ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column)));
		}

		foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
		{
			writer.WriteLine(String.Format("_{0}.Initialize(objectInfo, \"{1}\", typeof({2}), \"{3}\");",
				ConventionsHelper.GetCammelCase(collectionProperty.PropertyName),
				collectionProperty.PropertyName,
				ClassHelper.GetClassFullName(collectionProperty.TargetTable),
				ColumnHelper.GetSqlSelectFieldStatementForCollectionProperty(table, collectionProperty, false)));

			if (propertiesBuilder.Length > 0)
			{
				propertiesBuilder.Append(", ");
			}
			propertiesBuilder.Append("_");
			propertiesBuilder.Append(ConventionsHelper.GetCammelCase(collectionProperty.PropertyName));
		}

		writer.WriteLine("}");
		writer.WriteLine();

		foreach (Column column in TableHelper.GetNotIgnoredColumns(table))
		{
			writer.WriteCommentSummary(ColumnHelper.GetDescription(column));
			if (!TypeHelper.IsBusinessObjectReference(column))
			{
				writer.WriteLine(String.Format("public FieldPropertyInfo {0}", PropertyHelper.GetPropertyName(column)));
			}
			else
			{
				string accessModifier = "public";
				if (TableHelper.GetAccessModifier(ColumnHelper.GetReferencedTable(column)) == "internal")
				{
					accessModifier = "internal";
				}
				writer.WriteLine(String.Format("{0} ReferenceFieldPropertyInfo {1}", accessModifier, PropertyHelper.GetPropertyName(column)));
			}
			writer.WriteLine("{");
			writer.WriteLine("get");
			writer.WriteLine("{");
			writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(TypeHelper.IsBusinessObjectReference(column) ? "ReferenceFieldPropertyInfo" : "FieldPropertyInfo"));
			writer.WriteLine(String.Format("return _{0};", ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column))));
			writer.WriteLine("}");
			writer.WriteLine("}");

			if (!TypeHelper.IsBusinessObjectReference(column))
			{
				writer.WriteLine(String.Format("private FieldPropertyInfo _{0};", ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column))));
			}
			else
			{
				writer.WriteLine(String.Format("private ReferenceFieldPropertyInfo _{0};", ConventionsHelper.GetCammelCase(PropertyHelper.GetPropertyName(column))));
			}
			writer.WriteLine();
		}

		foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
		{
			string accessModifier = "public";
			if (TableHelper.GetAccessModifier(collectionProperty.TargetTable) == "internal")
			{
				accessModifier = "internal";
			}

			writer.WriteCommentSummary(collectionProperty.Description);
			writer.WriteLine(String.Format("{0} CollectionPropertyInfo {1}", accessModifier, collectionProperty.PropertyName));
			writer.WriteLine("{");
			writer.WriteLine("get");
			writer.WriteLine("{");
			writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull("CollectionPropertyInfo"));
			writer.WriteLine(String.Format("return _{0};", ConventionsHelper.GetCammelCase(collectionProperty.PropertyName)));
			writer.WriteLine("}");
			writer.WriteLine("}");
			writer.WriteLine(String.Format("private CollectionPropertyInfo _{0};", ConventionsHelper.GetCammelCase(collectionProperty.PropertyName)));
			writer.WriteLine();
		}

		writer.WriteCommentSummary(String.Format("Všechny sloupečky typu {0}.", ClassHelper.GetClassName(table)));
		writer.WriteLine("public PropertyInfoCollection All");
		writer.WriteLine("{");
		writer.WriteLine("get");
		writer.WriteLine("{");
		writer.WriteLine("return _all;");
		writer.WriteLine("}");
		writer.WriteLine("}");
		writer.WriteLine("private PropertyInfoCollection _all;");
		writer.WriteLine();

		writer.WriteLine("}");
		writer.WriteLine("}");

		writer.Save();
	}

	private static void RenameObsoleteFileIfExists(Table table, CsprojFile csprojFile)
	{
		string oldFilename = FileHelper.GetFilename(table, "PropertiesBase.cs", FileHelper.GeneratedFolder);
		string newFilename = FileHelper.GetFilename(table, "Properties.cs", FileHelper.GeneratedFolder);

		if (csprojFile != null)
		{
			csprojFile.Remove(oldFilename);
		}

		if (System.IO.File.Exists(FileHelper.ResolvePath(oldFilename)) && !System.IO.File.Exists(FileHelper.ResolvePath(newFilename)))
		{
			System.IO.File.Move(FileHelper.ResolvePath(oldFilename), FileHelper.ResolvePath(newFilename));
		}
		else if (System.IO.File.Exists(FileHelper.ResolvePath(oldFilename)))
		{
			System.IO.File.Delete(FileHelper.ResolvePath(oldFilename));
		}
	}
}
