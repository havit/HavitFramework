using System.Data;
using Havit.Business.BusinessLayerGenerator.Csproj;
using Havit.Business.BusinessLayerGenerator.Helpers;
using Havit.Business.BusinessLayerGenerator.Helpers.NamingConventions;
using Havit.Business.BusinessLayerGenerator.Helpers.Types;
using Havit.Business.BusinessLayerGenerator.Writers;
using Microsoft.SqlServer.Management.Smo;

namespace Havit.Business.BusinessLayerGenerator.Generators;

public static class DbResourcesPartialClass
{
	public static void Generate(Table table, CsprojFile csprojFile)
	{
		string fileName = FileHelper.GetFilename(NamespaceHelper.GetNamespaceName(table, false), "DbResources", ".partial.cs", FileHelper.GeneratedFolder);

		if (csprojFile != null)
		{
			csprojFile.Ensures(fileName);
		}

		CodeWriter writer = new CodeWriter(FileHelper.ResolvePath(fileName));
		Autogenerated.WriteAutogeneratedNoCodeHere(writer);

		BusinessObjectUsings.WriteUsings(writer);

		writer.WriteLine(String.Format("namespace {0}", NamespaceHelper.GetNamespaceName(table)));
		writer.WriteLine("{");
		writer.WriteCommentSummary("Database resources wrapper.");
		writer.WriteLine("public partial class DbResources");
		writer.WriteLine("{");
		WritePrivateFields(writer);
		WriteCurrent(writer);
		WriteConstructors(writer);

		WriteGetString(writer);
		WriteGetResourceClassLanguageData(writer, table);
		WriteGetCultureInfo(writer);

		WriteResourceProperties(writer, table);
		WriteResourceClassesDefinition(writer, table);
		WriteCacheDbResourcesMethods(writer, table);
		writer.WriteLine("}");
		writer.WriteLine("}");
		writer.Save();
	}

	private static void WritePrivateFields(CodeWriter writer)
	{
		writer.WriteOpenRegion("Private fields");
		writer.WriteLine("private Func<System.Globalization.CultureInfo> getCultureInfoMethod;");
		writer.WriteCloseRegion();
	}

	private static void WriteCurrent(CodeWriter writer)
	{
		writer.WriteOpenRegion("Current");
		writer.WriteCommentSummary("Vrací resources pro aktuální culture info.");
		writer.WriteLine("public static DbResources Current { get; set; }");
		writer.WriteCloseRegion();
	}

	private static void WriteConstructors(CodeWriter writer)
	{
		writer.WriteOpenRegion("Constructor (static)");
		writer.WriteCommentSummary("Statický konstruktor. Inicializuje hodnotu pro vlastnost Current.");
		writer.WriteLine("static DbResources()");
		writer.WriteLine("{");
		writer.WriteLine("Current = new DbResources(() => System.Globalization.CultureInfo.CurrentUICulture);");
		writer.WriteLine("}");
		writer.WriteCloseRegion();
		writer.WriteOpenRegion("Constructors");
		writer.WriteCommentSummary("Konstruktor.");
		writer.WriteLine("internal DbResources(Func<System.Globalization.CultureInfo> getCultureInfoMethod)");
		writer.WriteLine("{");
		writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Assert(getCultureInfoMethod != null, \"getCultureInfoMethod != null\");");
		writer.WriteHavitContract("");
		writer.WriteLine("this.getCultureInfoMethod = getCultureInfoMethod;");
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteCommentSummary("Konstruktor. Vytváří instanci pro resources v dané culture info.");
		writer.WriteLine("public DbResources(System.Globalization.CultureInfo cultureInfo) : this(() => cultureInfo)");
		writer.WriteLine("{");
		writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Assert(cultureInfo != null, \"cultureInfo != null\");");
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteCommentSummary("Konstruktor. Vytváří instanci pro resources v daném jazyce.");
		writer.WriteLine(String.Format("public DbResources({0} language) : this(System.Globalization.CultureInfo.GetCultureInfo(language.Culture))", ClassHelper.GetClassFullName(LanguageHelper.GetLanguageTable())));
		writer.WriteLine("{");
		writer.WriteLine("}");

		writer.WriteCloseRegion();
	}

	private static void WriteGetString(CodeWriter writer)
	{
		writer.WriteOpenRegion("GetString");
		writer.WriteCommentSummary("Vrátí resource string.");
		writer.WriteLine("public virtual string GetString(string resourceClass, string resourceKey, CultureInfo cultureInfo)");
		writer.WriteLine("{");
		writer.WriteLine("return GetStringInternal(resourceClass, resourceKey, cultureInfo, false);");
		writer.WriteLine("}");
		writer.WriteLine("");
		writer.WriteLine("private string GetStringInternal(string resourceClass, string resourceKey, CultureInfo cultureInfo, bool isRecursion)");
		writer.WriteLine("{");
		writer.WriteLine("Dictionary<string, Dictionary<string, string>> resourceClassesData = (Dictionary<string, Dictionary<string, string>>)GetDbResourcesDataFromCache(cultureInfo);");
		writer.WriteLine("Dictionary<string, string> resourceKeysData;");
		writer.WriteLine("string result = null;");
		writer.WriteLine();
		writer.WriteLine("if (resourceClassesData == null)");
		writer.WriteLine("{");
		writer.WriteLine("lock(_getStringLock)");
		writer.WriteLine("{");
		writer.WriteLine("resourceClassesData = (Dictionary<string, Dictionary<string, string>>)GetDbResourcesDataFromCache(cultureInfo);");
		writer.WriteLine("if (resourceClassesData == null)");
		writer.WriteLine("{");
		writer.WriteLine("resourceClassesData = GetResourceClassesData(cultureInfo);");
		writer.WriteLine("AddDbResourcesDataToCache(cultureInfo, resourceClassesData);");
		writer.WriteLine("}");
		writer.WriteLine("}");
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteLine("if (resourceClassesData.TryGetValue(resourceClass.ToLowerInvariant(), out resourceKeysData))");
		writer.WriteLine("{");
		writer.WriteLine("resourceKeysData.TryGetValue(resourceKey.ToLowerInvariant(), out result);");
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteLine("// Pokud se nepodařilo získat hodnotu, zkusíme ji najít ve výchozím jazyce.");
		writer.WriteLine("if ((result == null) && (cultureInfo != CultureInfo.InvariantCulture))");
		writer.WriteLine("{");
		writer.WriteLine("result = GetStringInternal(resourceClass, resourceKey, CultureInfo.InvariantCulture, true);");
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteLine("// v debugu dovolíme spuštění i bez platné hodnoty v resources");
		writer.WriteLine("// null hodnota znamená nenalezenou hodnotu v resources a kompilační chybu");
		writer.WriteLine("#if DEBUG");
		writer.WriteLine("if ((result == null) && (!isRecursion))");
		writer.WriteLine("{");
		writer.WriteLine("result = String.Format(\"[{0},{1},{2}]\", resourceClass, resourceKey, cultureInfo.Name);");
		writer.WriteLine("}");
		writer.WriteLine("#endif");
		writer.WriteLine();
		writer.WriteLine("return result;");
		writer.WriteLine("}");
		writer.WriteLine("private object _getStringLock = new object();");
		writer.WriteCloseRegion();
	}

	private static void WriteGetResourceClassLanguageData(CodeWriter writer, Table resourceClassTable)
	{
		string resourceClassNameColumn = ColumnHelper.FindFirstExistingColumn(resourceClassTable, "ClassName", "Name", "Nazev");
		string resourceClassTableSchema = resourceClassTable.Schema;
		string resourceClassTableName = resourceClassTable.Name;

		Table resourceItemTable = DatabaseHelper.FindTable("ResourceItem", "dbo");
		string resourceItemKeyColumn = ColumnHelper.FindFirstExistingColumn(resourceItemTable, "ResourceKey", "Name", "Nazev");
		string resourceItemTableSchema = resourceItemTable.Schema;
		string resourceItemTableName = resourceItemTable.Name;

		Table resourceItemTableLocalization = LocalizationHelper.GetLocalizationTable(resourceItemTable);
		string resourceItemLocalizationNameColumn = "Value";
		string resourceItemLocalizationTableSchema = resourceItemTableLocalization.Schema;
		string resourceItemLocalizationTableName = resourceItemTableLocalization.Name;

		string commandText = String.Format(@"SELECT _rc.[{0}] as ResourceClass, _ri.[{3}] as ResourceKey, _ril.[{6}] as Value FROM [{1}].[{2}] _rc INNER JOIN [{4}].[{5}] _ri ON (_rc.[ResourceClassID] = _ri.[ResourceClassID]) INNER JOIN [{7}].[{8}] _ril ON (_ri.[ResourceItemID] = _ril.[ResourceItemID]) WHERE (_ril.[LanguageID] = @LanguageID) AND (_ril.Value IS NOT NULL);",
			resourceClassNameColumn, // 0
			resourceClassTableSchema, // 1
			resourceClassTableName, // 2

			resourceItemKeyColumn, // 3
			resourceItemTableSchema, // 4
			resourceItemTableName, // 5

			resourceItemLocalizationNameColumn, // 6
			resourceItemLocalizationTableSchema, // 7
			resourceItemLocalizationTableName); // 8												 

		writer.WriteOpenRegion("GetResourceClassesData");
		writer.WriteCommentSummary("Načte hodnoty lokalizací pro jeden jazyk (resp. cultureInfo).");
		writer.WriteLine("private Dictionary<string, Dictionary<string, string>> GetResourceClassesData(CultureInfo cultureInfo)");
		writer.WriteLine("{");
		writer.WriteLine(String.Format("{0} language = {0}.GetByUICulture(cultureInfo);", ClassHelper.GetClassFullName(LanguageHelper.GetLanguageTable())));
		writer.WriteLine();
		writer.WriteLine("DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();");
		writer.WriteLine(String.Format("dbCommand.CommandText = \"{0}\";", commandText));
		writer.WriteLine("");
		writer.WriteLines(BusinessObjectSqlParameter.GetSqlParameterCode("LanguageID", DataType.Int, "language.ID", ParameterDirection.Input));
		writer.WriteLine("");
		writer.WriteLine("List<string[]> resourceClassesData = new List<string[]>();");
		writer.WriteLine("using (DbDataReader reader = DbConnector.Default.ExecuteReader(dbCommand))");
		writer.WriteLine("{");
		writer.WriteLine("while (reader.Read())");
		writer.WriteLine("{");
		writer.WriteLine("resourceClassesData.Add(new string[] {");
		writer.Indent();
		writer.WriteLine("((string)reader[\"ResourceClass\"]).ToLowerInvariant(),");
		writer.WriteLine("((string)reader[\"ResourceKey\"]).ToLowerInvariant(),");
		writer.WriteLine("(string)reader[\"Value\"] });");
		writer.Unindent();
		writer.WriteLine("}"); // while
		writer.WriteLine("}"); // using
		writer.WriteLine();
		writer.WriteLine("return resourceClassesData");
		writer.Indent();
		writer.WriteLine(".GroupBy(item => item[0] /* ResourceClass */)");
		writer.WriteLine(".ToDictionary(");
		writer.Indent();
		writer.WriteLine("item => item.Key /* ResourceClass */,");
		writer.WriteLine("group => group.ToDictionary(entry => entry[1] /* ResourceKey */ , entry => entry[2] /* Value */ ));");
		writer.Unindent();
		writer.Unindent();

		writer.WriteLine("}");
		writer.WriteCloseRegion();

	}

	private static void WriteGetCultureInfo(CodeWriter writer)
	{
		writer.WriteOpenRegion("GetCultureInfo");
		writer.WriteLine("private System.Globalization.CultureInfo GetCultureInfo()");
		writer.WriteLine("{");
		writer.WriteLine("return getCultureInfoMethod();");
		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	public static void WriteResourceProperties(CodeWriter writer, Table resourceClassTable)
	{
		foreach (ResourceClass resourceClass in ResourceHelper.GetResourceClasses(resourceClassTable))
		{
			if (ConventionsHelper.IsValidClassName(resourceClass.ClassName))
			{
				WriteResourceProperty(writer, resourceClass);
			}
		}
	}

	private static void WriteResourceProperty(CodeWriter writer, ResourceClass resourceClass)
	{
		string fieldName = ConventionsHelper.GetUnderScoped(ConventionsHelper.GetCammelCase(resourceClass.ClassName));

		writer.WriteOpenRegion(resourceClass.ClassName);
		if (!String.IsNullOrEmpty(resourceClass.Comment))
		{
			writer.WriteCommentSummary(resourceClass.Comment);
		}
		writer.WriteLine(String.Format("public ResourceClasses.{0} {0}", resourceClass.ClassName));
		writer.WriteLine("{");
		writer.WriteLine("get");
		writer.WriteLine("{");
		writer.WriteLine(String.Format("if ({0} == null)", fieldName));
		writer.WriteLine("{");
		writer.WriteLine(String.Format("{0} = new ResourceClasses.{1}(this);", fieldName, resourceClass.ClassName));
		writer.WriteLine("}"); // if
		writer.WriteLine(String.Format("return {0};", fieldName));
		writer.WriteLine("}"); // getter
		writer.WriteLine("}"); // property			
		writer.WriteLine(String.Format("private ResourceClasses.{1} {0};", fieldName, resourceClass.ClassName));
		writer.WriteCloseRegion();
	}

	private static void WriteResourceClassesDefinition(CodeWriter writer, Table resourceClassTable)
	{
		writer.WriteOpenRegion("ResourceClasses (nested class)");
		writer.WriteCommentSummary("Obsahuje třídy pro jednotlivé slovníky resources.");
		writer.WriteLine("public static partial class ResourceClasses");
		writer.WriteLine("{");

		foreach (ResourceClass resourceClass in ResourceHelper.GetResourceClasses(resourceClassTable))
		{
			if (ConventionsHelper.IsValidClassName(resourceClass.ClassName))
			{
				WriteResourceClassDefinition(writer, resourceClassTable, resourceClass, resourceClass.ClassName);
			}
		}

		writer.WriteLine("}");
		writer.WriteCloseRegion();

	}

	private static void WriteResourceClassDefinition(CodeWriter writer, Table resourceClassTable, ResourceClass resourceClass, string className)
	{
		writer.WriteOpenRegion(resourceClass.ClassName + " (nested class)");

		if (!String.IsNullOrEmpty(resourceClass.Comment))
		{
			writer.WriteCommentSummary(resourceClass.Comment);
		}
		writer.WriteLine(String.Format("public partial class {0}", className));
		writer.WriteLine("{");

		writer.WriteOpenRegion("Private fields");
		writer.WriteLine("private DbResources dbResources;");
		writer.WriteCloseRegion();

		writer.WriteOpenRegion("Constructor (internal)");
		writer.WriteLine(String.Format("internal {0}(DbResources dbResources)", className));
		writer.WriteLine("{");
		writer.WriteLine("this.dbResources = dbResources;");
		writer.WriteLine("}");
		writer.WriteCloseRegion();

		foreach (ResourceItem resourceItem in ResourceHelper.GetResourceItems(resourceClass.ID))
		{
			if (ConventionsHelper.IsValidClassName(resourceItem.Name))
			{
				if (resourceItem.Name == resourceClass.ClassName)
				{
					ConsoleHelper.WriteLineWarning("ResourceClass '{0}' obsahuje stejnojmennou ResourceKey, C# compiler nedovolí zkompilovat třídu se stejnojmennou vlastností, proto byla položka přeskočena.", resourceClass.ClassName);
					writer.WriteLine(String.Format("// {0} (přeskočeno pro shodu s názvem třídy, což c# compiler neumožňuje.", resourceItem.Name));
					writer.WriteLine();
					continue;
				}

				writer.WriteOpenRegion(resourceItem.Name);
				writer.WriteCommentSummary(String.Format("Vrací hodnotu z resources pro klíč \"{0}\".", resourceItem.Name));
				writer.WriteLine(String.Format("public string {0}", resourceItem.Name));
				writer.WriteLine("{");
				writer.WriteLine("get");
				writer.WriteLine("{");
				writer.WriteLine(String.Format("return dbResources.GetString(\"{0}\", \"{1}\", dbResources.GetCultureInfo());", resourceClass.ClassName, resourceItem.Name));
				writer.WriteLine("}");
				writer.WriteLine("}");
				writer.WriteLine();
				writer.WriteCloseRegion();
			}
			else
			{
				ConsoleHelper.WriteLineWarning("ResourceClass '{0}' obsahuje ResourceKey '{1}', který není korektním identifikátorem.", resourceClass.ClassName, resourceItem.Name);
				writer.WriteLine(String.Format("// {0} (přeskočeno pro nekorektnost identifikátoru.", resourceItem.Name));
				writer.WriteLine();
			}
		}

		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	private static void WriteCacheDbResourcesMethods(CodeWriter writer, Table table)
	{
		Table resourceItemTable = DatabaseHelper.FindTable("ResourceItem", "dbo");
		Table resourceItemLocalizationTable = LocalizationHelper.GetLocalizationTable(resourceItemTable);

		if ((table.Name == "ResourceClass") && (resourceItemTable != null))
		{
			bool useCacheDependencies = resourceItemLocalizationTable != null && !TableHelper.IsReadOnly(resourceItemTable);

			writer.WriteOpenRegion("Cache resources methods");

			writer.WriteCommentSummary("Vrátí název klíče pro resources.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("private string GetDbResourcesDataCacheKey(CultureInfo cultureInfo)");
			writer.WriteLine("{");
			writer.WriteLine("return \"DbResources|culture=\" + cultureInfo.Name;");
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Přidá resources do cache.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("private void AddDbResourcesDataToCache(CultureInfo cultureInfo, object resources)");
			writer.WriteLine("{");

			if (useCacheDependencies)
			{
				writer.WriteLine("if (!Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)");
				writer.WriteLine("{");
				writer.WriteLine("throw new InvalidOperationException(\"Použitá BusinessLayerCacheService nepodporuje cache dependencies.\");");
				writer.WriteLine("}");
				writer.WriteLine();
			}

			writer.WriteLine("Havit.Services.Caching.CacheOptions options = new Havit.Services.Caching.CacheOptions");
			writer.WriteLine("{");
			if (useCacheDependencies)
			{
				writer.WriteLine(String.Format("CacheDependencyKeys = new string[] {{ {0}.GetAnySaveCacheDependencyKey() }},", ClassHelper.GetClassFullName(resourceItemLocalizationTable)));
			}
			writer.WriteLine("Priority = Havit.Services.Caching.CacheItemPriority.High");
			writer.Unindent();
			writer.WriteLine("};");
			writer.WriteLine("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.AddDbResourcesDataToCache(GetDbResourcesDataCacheKey(cultureInfo), resources, options);");
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Vyhledá v cache resources object pro daný cultureinfo a vrátí jej. Nejsou-li v cache nalezeny, vrací null.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("private object GetDbResourcesDataFromCache(CultureInfo cultureInfo)");
			writer.WriteLine("{");
			writer.WriteLine("return Havit.Business.BusinessLayerContext.BusinessLayerCacheService.GetDbResourcesDataFromCache(GetDbResourcesDataCacheKey(cultureInfo));");
			writer.WriteLine("}");

			writer.WriteCloseRegion();
		}
	}
}
