using Havit.Business.BusinessLayerGenerator.Csproj;
using Havit.Business.BusinessLayerGenerator.Helpers;
using Havit.Business.BusinessLayerGenerator.Helpers.NamingConventions;
using Havit.Business.BusinessLayerGenerator.Settings;
using Havit.Business.BusinessLayerGenerator.Writers;
using Microsoft.SqlServer.Management.Smo;

namespace Havit.Business.BusinessLayerGenerator.Generators;

public static class CollectionBaseClass
{
	public static void Generate(Table table, CsprojFile csprojFile)
	{
		string fileName = FileHelper.GetFilename(table, "CollectionBase.cs", FileHelper.GeneratedFolder);

		if (csprojFile != null)
		{
			csprojFile.Ensures(fileName);
		}

		CodeWriter writer = new CodeWriter(FileHelper.ResolvePath(fileName));

		Autogenerated.WriteAutogeneratedNoCodeHere(writer);
		BusinessObjectUsings.WriteUsings(writer);
		WriteNamespaceBegin(writer, table);
		WriteClassBegin(writer, table);

		WriteConstructors(writer, table, true);
		WriteFind(writer, table);
		WriteSort(writer, table);
		WriteLoadAll(writer, table);
		LocalizationCollectionGenerator.WriteLocalizations(writer, table);

		WriteClassEnd(writer);
		WriteNamespaceEnd(writer);

		writer.Save();
	}

	public static void WriteNamespaceBegin(CodeWriter writer, Table table)
	{
		writer.WriteLine(String.Format("namespace {0}", NamespaceHelper.GetNamespaceName(table)));
		writer.WriteLine("{");
	}

	private static void WriteClassBegin(CodeWriter writer, Table table)
	{
		string interfaces = "";
		if (LocalizationHelper.IsLocalizationTable(table))
		{
			interfaces += ", ILocalizationCollection";
		}
		writer.WriteCommentSummary(String.Format("Kolekce business objektů typu {0}.", ClassHelper.GetClassFullName(table)));
		writer.WriteMicrosoftContract(ContractHelper.GetContractVerificationAttribute(false));
		writer.WriteGeneratedCodeAttribute();
		writer.WriteLine(String.Format("{0} partial class {1} : {2}{3}",
			TableHelper.GetAccessModifier(table),
			ClassHelper.GetCollectionBaseClassName(table),
			ClassHelper.GetBusinessObjectLayerCollectionSupertype(table),
			interfaces));
		writer.WriteLine("{");
	}

	public static void WriteClassEnd(CodeWriter writer)
	{
		writer.WriteLine("}");
	}

	public static void WriteNamespaceEnd(CodeWriter writer)
	{
		writer.WriteLine("}");
	}

	private static void WriteFind(CodeWriter writer, Table table)
	{
		writer.WriteOpenRegion("Find & FindAll");

		writer.WriteCommentSummary("Prohledá kolekci a vrátí první nalezený prvek odpovídající kritériu match.");
		writer.WriteLine(String.Format("public override {0} Find(Predicate<{0}> match)", ClassHelper.GetClassName(table)));
		writer.WriteLine("{");
		writer.WriteLine("LoadAll();");
		writer.WriteLine("return base.Find(match);");
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteCommentSummary("Prohledá kolekci a vrátí všechny prvky odpovídající kritériu match.");
		writer.WriteLine(String.Format("public override {0} FindAll(Predicate<{1}> match)", ClassHelper.GetCollectionClassName(table), ClassHelper.GetClassName(table)));
		writer.WriteLine("{");
		writer.WriteLine("LoadAll();");
		writer.WriteLine("return base.FindAll(match);");
		writer.WriteLine("}");

		writer.WriteCloseRegion();
	}

	private static void WriteSort(CodeWriter writer, Table table)
	{
		writer.WriteOpenRegion("Sort");

		writer.WriteLine("/// <summary>");
		writer.WriteLine("/// Seřadí prvky kolekce dle požadované property, která implementuje IComparable.");
		writer.WriteLine("/// </summary>");
		writer.WriteLine("/// <remarks>");
		writer.WriteLine("/// Používá Havit.Collections.GenericPropertyComparer{T}. K porovnávání podle property");
		writer.WriteLine("/// tedy dochází pomocí reflexe - relativně pomalu. Pokud je potřeba vyšší výkon, je potřeba použít");
		writer.WriteLine("/// overload Sort(Generic Comparsion) s přímým přístupem k property.");
		writer.WriteLine("/// </remarks>");
		writer.WriteLine("/// <param name=\"propertyName\">property, podle které se má řadit</param>");
		writer.WriteLine("/// <param name=\"ascending\">true, pokud se má řadit vzestupně, false, pokud sestupně</param>");
		writer.WriteLine("[Obsolete]");
		writer.WriteLine("public override void Sort(string propertyName, bool ascending)");
		writer.WriteLine("{");
		writer.WriteLine("LoadAll();");
		writer.WriteLine("base.Sort(propertyName, ascending);");
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteLine("/// <summary>");
		writer.WriteLine("/// Seřadí prvky kolekce dle požadované property, která implementuje IComparable.");
		writer.WriteLine("/// Před řazením načtě všechny prvky metodou LoadAll.");
		writer.WriteLine("/// </summary>");
		writer.WriteLine("/// <remarks>");
		writer.WriteLine("/// Používá Havit.Collections.GenericPropertyComparer{T}. K porovnávání podle property");
		writer.WriteLine("/// tedy dochází pomocí reflexe - relativně pomalu. Pokud je potřeba vyšší výkon, je potřeba použít");
		writer.WriteLine("/// overload Sort(Generic Comparsion) s přímým přístupem k property.");
		writer.WriteLine("/// </remarks>");
		writer.WriteLine("/// <param name=\"propertyInfo\">Property, podle které se má řadit.</param>");
		writer.WriteLine("/// <param name=\"sortDirection\">Směr řazení.</param>");
		writer.WriteLine("public override void Sort(PropertyInfo propertyInfo, SortDirection sortDirection)");
		writer.WriteLine("{");
		writer.WriteLine("LoadAll();");
		writer.WriteLine("base.Sort(propertyInfo, sortDirection);");
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteLine("/// <summary>");
		writer.WriteLine("/// Seřadí prvky kolekce dle zadaného srovnání. Publikuje metodu Sort(Generic Comparsion) inner-Listu.");
		writer.WriteLine("/// Před řazením načtě všechny prvky metodou LoadAll.");
		writer.WriteLine("/// </summary>");
		writer.WriteLine("/// <param name=\"comparsion\">srovnání, podle kterého mají být prvky seřazeny</param>");
		writer.WriteLine(String.Format("public override void Sort(Comparison<{0}> comparsion)", ClassHelper.GetClassName(table)));
		writer.WriteLine("{");
		writer.WriteLine("LoadAll();");
		writer.WriteLine("base.Sort(comparsion);");
		writer.WriteLine("}");

		writer.WriteCloseRegion();

	}

	private static void WriteLoadAll(CodeWriter writer, Table table)
	{
		bool loadAllLocalizations = (LocalizationHelper.IsLocalizedTable(table) && (TableHelper.GetLoadAllIncludeLocalizations(table)));

		writer.WriteOpenRegion("LoadAll");

		writer.WriteCommentSummary(loadAllLocalizations ? "Načte všechny prvky kolekce a jejich lokalizace." : "Načte všechny prvky kolekce.");
		writer.WriteLine("public void LoadAll()");
		writer.WriteLine("{");
		writer.WriteLine("LoadAll(null);");
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteCommentSummary(loadAllLocalizations ? "Načte všechny prvky kolekce a jejich lokalizace." : "Načte všechny prvky kolekce.");
		writer.WriteLine("public void LoadAll(DbTransaction transaction)");
		writer.WriteLine("{");
		writer.WriteLine("if ((!LoadAllRequired) || (this.Count == 0))");
		writer.WriteLine("{");
		writer.WriteLine("return;");
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteLine(String.Format("Dictionary<int, {0}> ghosts = new Dictionary<int, {0}>();", ClassHelper.GetClassName(table)));
		writer.WriteLine("");
		writer.WriteLine("for (int i = 0; i < this.Count; i++)");
		writer.WriteLine("{");
		writer.WriteLine(String.Format("{0} currentObject = this[i];", ClassHelper.GetClassName(table)));
		writer.WriteLine("if ((currentObject != null) && (!currentObject.IsLoaded))");
		writer.WriteLine("{");

		if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
		{
			writer.WriteLine(String.Format("DataRecord cachedDataRecord = {0}.GetDataRecordFromCache(currentObject.ID);", ClassHelper.GetClassName(table)));
			writer.WriteLine("if (cachedDataRecord != null)");
			writer.WriteLine("{");
			writer.WriteLine("currentObject.Load(cachedDataRecord);");
			writer.WriteLine("continue;");
			writer.WriteLine("}");
			writer.WriteLine();
		}

		writer.WriteLine("if (!ghosts.ContainsKey(currentObject.ID))");
		writer.WriteLine("{");
		writer.WriteLine("ghosts.Add(currentObject.ID, currentObject);");
		writer.WriteLine("}"); // if (!ghosts.ContainsKey(currentObject.ID))
		writer.WriteLine("}"); // if this[i].IsLoaded
		writer.WriteLine("}"); // for

		writer.WriteLine();

		writer.WriteLine("if (ghosts.Count > 0)");
		writer.WriteLine("{");

		writer.WriteLine(String.Format("DbCommand dbCommand = {0}.ProviderFactory.CreateCommand();", DatabaseHelper.GetDbConnector()));
		writer.WriteLine("dbCommand.Transaction = transaction;");
		writer.WriteLine();
		writer.WriteLine("QueryParams queryParams = new QueryParams();");
		writer.WriteLine(String.Format("queryParams.ObjectInfo = {0}.ObjectInfo;", ClassHelper.GetClassName(table)));
		writer.WriteLine(String.Format("queryParams.Conditions.Add(ReferenceCondition.CreateIn({0}.Properties.ID, ghosts.Keys.ToArray()));", ClassHelper.GetClassName(table)));
		writer.WriteLine("queryParams.IncludeDeleted = true;");

		writer.WriteLine(String.Format("queryParams.PrepareCommand(dbCommand, SqlServerPlatform.{0}, CommandBuilderOptions.None);",
			GeneratorSettings.TargetPlatform)); // 0

		writer.WriteLine();

		writer.WriteLine(String.Format("using (DbDataReader reader = {0}.ExecuteReader(dbCommand))", DatabaseHelper.GetDbConnector()));
		writer.WriteLine("{");
		writer.WriteLine("while (reader.Read())");
		writer.WriteLine("{");
		writer.WriteLine("DataRecord dataRecord = new DataRecord(reader, queryParams.GetDataLoadPower());");
		writer.WriteLine(String.Format("int id = dataRecord.Get<int>({0}.Properties.ID.FieldName);", ClassHelper.GetClassName(table)));
		writer.WriteLine();
		writer.WriteLine(String.Format("{0} ghost = ghosts[id];", ClassHelper.GetClassName(table)));
		writer.WriteLine("if (!ghost.IsLoaded)");
		writer.WriteLine("{");
		writer.WriteLine("ghost.Load(dataRecord);");

		if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
		{
			writer.WriteLine("ghost.AddDataRecordToCache(dataRecord);");
		}

		writer.WriteLine("}"); // if (!ghost.IsLoaded)
		writer.WriteLine("}"); // if (ghosts.Count > 0)
		writer.WriteLine("}"); // reader
		writer.WriteLine("}"); // using

		if (loadAllLocalizations)
		{
			Table localizationTable = LocalizationHelper.GetLocalizationTable(table);
			writer.WriteLine();
			writer.WriteLine(String.Format("{0} localizations = new {0}();", ClassHelper.GetCollectionClassName(localizationTable)));
			writer.WriteLine(String.Format("foreach ({0} {1} in this)", ClassHelper.GetClassName(table), ConventionsHelper.GetCammelCase(ClassHelper.GetClassName(table))));
			writer.WriteLine("{");
			writer.WriteLine(String.Format("if ({0} != null)", ConventionsHelper.GetCammelCase(ClassHelper.GetClassName(table))));
			writer.WriteLine("{");
			writer.WriteLine(String.Format("localizations.AddRange({0}.Localizations);", ConventionsHelper.GetCammelCase(ClassHelper.GetClassName(table))));
			writer.WriteLine("}"); // if
			writer.WriteLine("}"); // foreach
			writer.WriteLine("localizations.LoadAll(transaction);");
		}
		writer.WriteLine();
		writer.WriteLine("LoadAllRequired = false;");
		writer.WriteLine("}"); // method
		writer.WriteCloseRegion();
	}

	public static void WriteConstructors(CodeWriter writer, Table table, bool baseClass)
	{
		string className = ClassHelper.GetClassName(table);
		string collectionClassName = baseClass ? ClassHelper.GetCollectionBaseClassName(table) : ClassHelper.GetCollectionClassName(table);

		writer.WriteOpenRegion("Constructors");
		writer.WriteCommentSummary("Vytvoří novou instanci kolekce.");

		if (!baseClass)
		{
			writer.WriteMicrosoftContract(ContractHelper.GetContractVerificationAttribute(false));
			writer.WriteGeneratedCodeAttribute();
		}

		writer.WriteLine(String.Format("public {0}() : base()", collectionClassName));
		writer.WriteLine("{");
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteCommentSummary("Vytvoří novou instanci kolekce a zkopíruje do ní prvky z předané kolekce.");

		if (!baseClass)
		{
			writer.WriteMicrosoftContract(ContractHelper.GetContractVerificationAttribute(false));
			writer.WriteGeneratedCodeAttribute();
		}

		writer.WriteLine(String.Format("public {0}(IEnumerable<{1}> collection) : base(collection)", collectionClassName, className));
		writer.WriteLine("{");
		writer.WriteLine("}");

		writer.WriteCloseRegion();
	}
}
