<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\AutoGenerated.tt"#>

using Havit.Data.EntityFrameworkCore.Patterns.Repositories;
using Havit.Data.EntityFrameworkCore.Patterns.SoftDeletes;
using Microsoft.EntityFrameworkCore;
using DbContext = Havit.Data.EntityFrameworkCore.DbContext;

namespace <#= Model.NamespaceName #>;

internal class <#= Model.RepositoryQueryProviderClassName #> : IRepositoryQueryProvider<<#= Model.ModelClassFullName #>, <#= Model.ModelClassPrimaryKeyTypeName #>>
{
	private readonly Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>, <#= Model.ModelClassFullName #>> _getObjectQuery;
	private readonly Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>, CancellationToken, Task<<#= Model.ModelClassFullName #>>> _getObjectAsyncQuery;
	private readonly Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>[], IEnumerable<<#= Model.ModelClassFullName #>>> _getObjectsQuery;
	private readonly Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>[], IAsyncEnumerable<<#= Model.ModelClassFullName #>>> _getObjectsAsyncQuery;

	public <#= Model.RepositoryQueryProviderClassName #>()
	{
		_getObjectQuery = EF.CompileQuery((DbContext dbContext, <#= Model.ModelClassPrimaryKeyTypeName #> id) => dbContext
			.Set<<#= Model.ModelClassFullName #>>()
			.TagWith("<#= Model.DbRepositoryName #>.GetObject")
			.Where(entity => entity.<#= Model.ModelClassPrimaryKeyPropertyName #> == id)
			.FirstOrDefault());

		_getObjectAsyncQuery = EF.CompileAsyncQuery((DbContext dbContext, <#= Model.ModelClassPrimaryKeyTypeName #> id, CancellationToken cancellationToken) => dbContext
			.Set<<#= Model.ModelClassFullName #>>()
			.TagWith("<#= Model.DbRepositoryName #>.GetObjectAsync")
			.Where(entity => entity.<#= Model.ModelClassPrimaryKeyPropertyName #> == id)
			.FirstOrDefault());

		_getObjectsQuery = EF.CompileQuery((DbContext dbContext, <#= Model.ModelClassPrimaryKeyTypeName #>[] ids) => dbContext
			.Set<<#= Model.ModelClassFullName #>>()
			.TagWith("<#= Model.DbRepositoryName #>.GetObjects")
			.Where(entity => ids.Contains(entity.<#= Model.ModelClassPrimaryKeyPropertyName #>)));

		_getObjectsAsyncQuery = EF.CompileAsyncQuery((DbContext dbContext, <#= Model.ModelClassPrimaryKeyTypeName #>[] ids) => dbContext
			.Set<<#= Model.ModelClassFullName #>>()
			.TagWith("<#= Model.DbRepositoryName #>.GetObjectsAsync")
			.Where(entity => ids.Contains(entity.<#= Model.ModelClassPrimaryKeyPropertyName #>)));
	}

	public Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>, <#= Model.ModelClassFullName #>> GetGetObjectQuery() => _getObjectQuery;
	public Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>, CancellationToken, Task<<#= Model.ModelClassFullName #>>> GetGetObjectAsyncQuery() => _getObjectAsyncQuery;
	public Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>[], IEnumerable<<#= Model.ModelClassFullName #>>> GetGetObjectsQuery() => _getObjectsQuery;
	public Func<DbContext, <#= Model.ModelClassPrimaryKeyTypeName #>[], IAsyncEnumerable<<#= Model.ModelClassFullName #>>> GetGetObjectsAsyncQuery() => _getObjectsAsyncQuery;
}
