<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Havit.Data.Entity.CodeGenerator.Actions.DataEntries.Model" #>
<#@ include file="..\..\AutoGenerated.tt"#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Havit.Data.Entity.Patterns;
using Havit.Data.Patterns.DataEntries;
using Havit.Data.Patterns.Repositories;

namespace <#= Model.NamespaceName #>
{
	[System.CodeDom.Compiler.GeneratedCode("Havit.Entity.CodeGenerator", "2.0")]
	public class <#= Model.DbClassName #> : DataEntries<<#= Model.ModelClassFullName #>, System.Int32>, <#= Model.InterfaceName #> 
	{
<# foreach (DataEntriesModel.Entry entry in Model.Entries) { #>
<# if (entry.IsObsolete) { #>		[Obsolete] 
<# } #>
		public <#= Model.ModelClassFullName #> <#= entry.PropertyName #>
        {
            get
            {
				if (<#= entry.FieldName #> == null)
				{
					<#= entry.FieldName #> = GetEntry(<#= Model.ModelEntriesEnumerationFullName #>.<#= entry.PropertyName #>);
				}
				return <#= entry.FieldName #>;
            }
        }
		private <#= Model.ModelClassFullName #> <#= entry.FieldName #>;

<# } #>
<# if (Model.UseDataEntrySymbolService) { #>
		public <#= Model.DbClassName #>(IDataEntrySymbolService<<#= Model.ModelClassFullName #>, System.Int32> dataEntrySymbolService, IRepository<<#= Model.ModelClassFullName #>, System.Int32> repository)
			: base(dataEntrySymbolService, repository)
<# } else { #>
		public <#= Model.DbClassName #>(IRepository<<#= Model.ModelClassFullName #>, System.Int32> repository)
			: base(repository)
<# } #>
		{
		}
	}
}