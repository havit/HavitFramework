//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Havit.Data.Patterns.DataSources;
using Microsoft.Extensions.DependencyInjection;

namespace Havit.EFCoreTests.DataLayer;

[System.CodeDom.Compiler.GeneratedCode("Havit.Data.EntityFrameworkCore.CodeGenerator", "1.0")]
public static class DataLayerServiceExtensions
{
	public static IServiceCollection AddDataLayerServices(this IServiceCollection services)
	{
		// services.AddDataLayerCoreServices();
	
		AddDataSources(services);
		AddRepositories(services);

		return services;
	}

	private static void AddDataSources(IServiceCollection services)
	{
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IAddressDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.Address>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.AddressDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IBusinessCaseDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.BusinessCase>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.BusinessCaseDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.ICheckedEntityDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.CheckedEntity>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.CheckedEntityDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.ILanguageDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.Language>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.LanguageDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IModelationDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.Modelation>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.ModelationDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IPersonDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.Person>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.PersonDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IPropertyWithProtectedMembersDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.PropertyWithProtectedMembers>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.PropertyWithProtectedMembersDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IStateDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.State>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.StateDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IStateLocalizationDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.StateLocalization>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.StateLocalizationDbDataSource), ServiceLifetime.Transient);
		//services.AddServices(new Type[] { typeof(Havit.EFCoreTests.DataLayer.DataSources.IUserDataSource), typeof(IDataSource<Havit.EFCoreTests.Model.User>) }, typeof(Havit.EFCoreTests.DataLayer.DataSources.UserDbDataSource), ServiceLifetime.Transient);
	}

	private static void AddRepositories(IServiceCollection services)
	{
	}
}
