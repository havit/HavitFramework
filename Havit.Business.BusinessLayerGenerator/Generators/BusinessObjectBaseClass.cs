using System.Data;
using System.Text;
using Havit.Business.BusinessLayerGenerator.Csproj;
using Havit.Business.BusinessLayerGenerator.Helpers;
using Havit.Business.BusinessLayerGenerator.Helpers.NamingConventions;
using Havit.Business.BusinessLayerGenerator.Helpers.Types;
using Havit.Business.BusinessLayerGenerator.Settings;
using Havit.Business.BusinessLayerGenerator.Writers;
using Havit.Web;
using Microsoft.SqlServer.Management.Smo;
using ContractHelper = Havit.Business.BusinessLayerGenerator.Helpers.ContractHelper;

namespace Havit.Business.BusinessLayerGenerator.Generators;

public static class BusinessObjectBaseClass
{
	public static void Generate(Table table, CsprojFile csprojFile)
	{
		string fileName = FileHelper.GetFilename(table, "Base.cs", FileHelper.GeneratedFolder);

		if (csprojFile != null)
		{
			csprojFile.Ensures(fileName);
		}
		CodeWriter writer = new CodeWriter(FileHelper.ResolvePath(fileName));

		Autogenerated.WriteAutogeneratedNoCodeHere(writer);

		BusinessObjectUsings.WriteUsings(writer);
		WriteNamespaceClassBegin(writer, table);

		WriteStaticConstructor(writer, table);

		BusinessObjectConstructors.WriteConstructors(writer, ClassHelper.GetBaseClassName(table), TableHelper.GetPrimaryKey(table).Name, TableHelper.IsReadOnly(table), true);

		Converters.WriteConverters(writer, table);

		writer.WriteOpenRegion("Properties dle sloupců databázové tabulky");
		BusinessObjectProperties.WriteProperties(writer, table);
		LocalizationGenerator.WriteLocalization(writer, table);
		BusinessObjectMoneyProperties.Write(writer, table);
		writer.WriteCloseRegion();

		WriteIsDeleted(writer, table);

		WriteInit(writer, table);
		WriteCleanDirty(writer, table);
		WriteCheckConstraints(writer, table);

		writer.WriteOpenRegion("Load: Load_GetDataRecord, Load_ParseDataRecord");
		WriteLoadGetDataRecord(writer, table);
		WriteLoadParseDataRecord(writer, table);
		writer.WriteCloseRegion();

		writer.WriteOpenRegion("Save & Delete: Save_SaveMembers, Save_SaveCollections, Save_MinimalInsert, Save_FullInsert, Save_Update, Save_Insert_InsertRequiredForMinimalInsert, Save_Insert_InsertRequiredForFullInsert, Delete, Delete_Perform");
		writer.WriteLine();
		WriteSaveSaveMembers(writer, table);
		WriteSaveSaveCollections(writer, table);
		WriteSaveMinimalInsert(writer, table);
		WriteSaveFullInsert(writer, table);
		WriteSaveUpdate(writer, table);
		WriteSaveInsertInsertRequiredForMinimalInsert(writer, table);
		WriteSaveInsertInsertRequiredForFullInsert(writer, table);
		WriteDelete(writer, table);
		WriteDeletePerform(writer, table);
		writer.WriteCloseRegion();
		WriteCacheBusinessObjectMethods(writer, table);
		WriteCacheDataRecordsMethods(writer, table);
		WriteCacheAllIDsMethods(writer, table);
		WriteCacheDependencyMethods(writer, table);
		WriteEnumClassMembers(writer, table);
		WriteEnumClassEnumIDs(writer, table);

		writer.WriteOpenRegion("GetFirst, GetList, GetAll");
		WriteGetFirst(writer, table);
		WriteGetLists(writer, table);
		WriteGetAlls(writer, table);
		writer.WriteCloseRegion();

		WriteClone(writer, table);

		LanguageClass.WriteLanguage(writer, table);
		BusinessObjectStoredProcedures.WriteStoredProcedures(writer, table);

		WriteToString(writer, table);
		WriteObjectInfo(writer, table);
		WritePropertiesInfo(writer, table);
		WriteNamespaceClassEnd(writer);

		writer.Save();
	}

	private static void WriteIsDeleted(CodeWriter writer, Table table)
	{
		Column deletedColumn = TableHelper.GetDeletedColumn(table);
		if (deletedColumn != null)
		{
			writer.WriteOpenRegion("IsDeleted");
			writer.WriteCommentSummary("Indikuje, zda je nastaven příznak smazaného záznamu.");
			writer.WriteLine("public override bool IsDeleted");
			writer.WriteLine("{");
			writer.WriteLine("get");
			writer.WriteLine("{");

			if (deletedColumn.DataType.SqlDataType == SqlDataType.Bit)
			{
				writer.WriteLine(String.Format("return {0};", PropertyHelper.GetPropertyName(deletedColumn)));
			}

			if (TypeHelper.IsDateTime(deletedColumn))
			{
				writer.WriteLine(String.Format("return {0} != null;", PropertyHelper.GetPropertyName(deletedColumn)));
			}
			writer.WriteLine("}");
			writer.WriteLine("}");
			writer.WriteCloseRegion();
		}
	}

	private static void WriteSaveInsertInsertRequiredForFullInsert(CodeWriter writer, Table table)
	{
		writer.WriteCommentSummary("Ukládá hodnoty potřebné pro provedení plného insertu.");
		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed void Save_Insert_InsertRequiredForFullInsert(DbTransaction transaction)");
		writer.WriteLine("{");
		if (!WriteExceptionForReadOnlyTables(writer, table))
		{
			writer.WriteLine("base.Save_Insert_InsertRequiredForFullInsert(transaction);");
			writer.WriteLine();
			foreach (Column column in TableHelper.GetDbReadWriteColumns(table))
			{
				if (TypeHelper.IsBusinessObjectReference(column) && column.Nullable)
				{
					writer.WriteLine(String.Format("if (this.IsNew && ({0}.Value != null) && ({0}.Value.IsNew))", PropertyHelper.GetPropertyHolderName(column)));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("{0}.Value.Save_MinimalInsert(transaction);", PropertyHelper.GetPropertyHolderName(column)));
					writer.WriteLine("}");
					writer.WriteLine();
				}
			}
			foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
			{
				if (collectionProperty.IsManyToMany)
				{
					string memberName = ConventionsHelper.GetCammelCase(ClassHelper.GetBaseClassName(collectionProperty.TargetTable));
					writer.WriteLine(String.Format("foreach ({0} {1} in {2})",
						ClassHelper.GetClassFullName(collectionProperty.TargetTable),
						memberName,
						collectionProperty.PropertyName));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("if ({0}.IsNew)", memberName));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("{0}.Save_MinimalInsert(transaction);", memberName));
					writer.WriteLine("}");
					writer.WriteLine("}");
					writer.WriteLine();
				}
			}
		}
		writer.WriteLine("}");
		writer.WriteLine();
	}

	private static void WriteSaveInsertInsertRequiredForMinimalInsert(CodeWriter writer, Table table)
	{
		writer.WriteCommentSummary("Ukládá hodnoty potřebné pro provedení minimálního insertu. Volá Save_Insert_SaveRequiredForMinimalInsert.");
		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed void Save_Insert_InsertRequiredForMinimalInsert(DbTransaction transaction)");
		writer.WriteLine("{");

		if (!WriteExceptionForReadOnlyTables(writer, table))
		{
			writer.WriteLine("base.Save_Insert_InsertRequiredForMinimalInsert(transaction);");
			writer.WriteLine();
			foreach (Column column in TableHelper.GetDbReadWriteColumns(table))
			{
				if (TypeHelper.IsBusinessObjectReference(column) && !column.Nullable)
				{
					writer.WriteLine(String.Format("if ({0}.Value.IsNew)", PropertyHelper.GetPropertyHolderName(column)));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("{0}.Value.Save_MinimalInsert(transaction);", PropertyHelper.GetPropertyHolderName(column)));
					writer.WriteLine("}");
					writer.WriteLine();
				}
			}
		}
		writer.WriteLine("}");
		writer.WriteLine();
	}

	private static void WriteStaticConstructor(CodeWriter writer, Table table)
	{
		Column deletedColumn = TableHelper.GetDeletedColumn(table);

		string deletedProperty = "null";
		if (deletedColumn != null)
		{
			deletedProperty = "properties." + PropertyHelper.GetPropertyName(deletedColumn);
		}

		string createObjectMethod = "null";
		List<Column> ownerColumns = TableHelper.GetOwnerColumns(table);
		if (!TableHelper.IsReadOnly(table) && !TableHelper.OmitCreateObjectMethod(table) && (ownerColumns.Count == 0))
		{
			createObjectMethod = ClassHelper.GetClassName(table) + ".CreateObject";
		}

		writer.WriteOpenRegion("Static constructor");
		writer.WriteLine(String.Format("static {0}()", ClassHelper.GetBaseClassName(table)));
		writer.WriteLine("{");
		writer.WriteLine("objectInfo = new ObjectInfo();");
		writer.WriteLine(String.Format("properties = new {0}();", ClassHelper.GetPropertiesClassName(table)));
		writer.WriteLine(String.Format("objectInfo.Initialize({0}, \"{1}\", \"{6}\", \"{7}\", {2}, {5}, {4}.GetObject, {4}.GetAll, {3}, properties.All);",
			DatabaseHelper.IsDatabaseSchemaSupported() ? String.Format("\"{0}\"", table.Schema) : "null", // String. jen obalí text uvozovkami /* 0 */
			table.Name, /* 1 */
			TableHelper.IsReadOnly(table).ToString().ToLower(), /* 2 */
			deletedProperty, /* 3 */
			ClassHelper.GetClassName(table), /* 4 */
			createObjectMethod /*5*/,
			ClassHelper.GetClassName(table),
			NamespaceHelper.GetNamespaceName(table)));
		writer.WriteLine("properties.Initialize(objectInfo);");
		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	private static void WriteNamespaceClassBegin(CodeWriter writer, Table table)
	{
		writer.WriteLine("namespace " + NamespaceHelper.GetNamespaceName(table));
		writer.WriteLine("{");

		string classComment = TableHelper.GetDescription(table);
		string typeComment = " [";
		if (TableHelper.IsCachable(table))
		{
			typeComment += "cached";
		}
		if (TableHelper.IsReadOnly(table))
		{
			if (typeComment.Length > 2)
			{
				typeComment += ", ";
			}
			typeComment += "read-only";
		}
		typeComment += "]";
		if (typeComment == " []")
		{
			typeComment = "";
		}

		writer.WriteCommentSummary(classComment + typeComment);

		if (!Settings.GeneratorSettings.Strategy.IsEntityFrameworkGeneratedDatabaseStrategy())
		{
			writer.WriteCommentLine("<remarks>");
			writer.WriteCommentLine("<code>");

			List<string> createScript = TableHelper.Script(table);

			foreach (string scriptLine in createScript)
			{
				writer.WriteCommentLine(HttpUtilityExt.HtmlEncode(scriptLine, HtmlEncodeOptions.IgnoreNonASCIICharacters));
			}
			writer.WriteCommentLine("</code>");
			writer.WriteCommentLine("</remarks>");
		}
		string interfaces = "";
		if (LanguageHelper.IsLanguageTable(table))
		{
			interfaces += ", ILanguage";
		}

		if (LocalizationHelper.IsLocalizedTable(table))
		{
			interfaces += ", ILocalizable";
		}

		writer.WriteMicrosoftContract(ContractHelper.GetContractVerificationAttribute(false));
		writer.WriteGeneratedCodeAttribute();

		writer.WriteLine(String.Format("{0} abstract class {1} : {2}{3}",
			TableHelper.GetAccessModifier(table),
			ClassHelper.GetBaseClassName(table),
			ClassHelper.GetBusinessObjectBaseType(table),
			interfaces));
		writer.WriteLine("{");
	}

	public static void WriteNamespaceClassEnd(CodeWriter writer)
	{
		writer.WriteLine("}");
		writer.WriteLine("}");
	}

	private static void WriteInit(CodeWriter writer, Table table)
	{
		writer.WriteOpenRegion("Init");

		writer.WriteCommentSummary("Inicializuje třídu (vytvoří instance PropertyHolderů).");
		writer.WriteLine("protected override void Init()");
		writer.WriteLine("{");

		foreach (Column column in TableHelper.GetPropertyColumns(table))
		{
			writer.WriteLine(String.Format("{0} = new PropertyHolder<{1}>(this);", PropertyHelper.GetPropertyHolderName(PropertyHelper.GetPropertyName(column)), TypeHelper.GetPropertyTypeName(column)));
		}

		List<CollectionProperty> collectionProperties = TableHelper.GetCollectionColumns(table);
		foreach (CollectionProperty collectionProperty in collectionProperties)
		{
			writer.WriteLine(String.Format("{0} = new CollectionPropertyHolder<{1}, {2}>(this, {2}.GetObject);", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName), ClassHelper.GetCollectionClassFullName(collectionProperty.TargetTable), ClassHelper.GetClassFullName(collectionProperty.TargetTable)));
		}

		writer.WriteLine();
		writer.WriteLine("if (IsNew || IsDisconnected)");
		writer.WriteLine("{");

		foreach (Column column in TableHelper.GetNotIgnoredColumns(table))
		{
			if (column.InPrimaryKey)
			{
				continue;
			}

			writer.WriteLine(String.Format("{0}.Value = {1};", PropertyHelper.GetPropertyHolderName(column), ColumnHelper.GetDefaultValueExpression(column)));
		}

		if (collectionProperties.Count > 0)
		{
			foreach (CollectionProperty collectionProperty in collectionProperties)
			{
				writer.WriteLine(String.Format("{0}.Initialize();", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
			}
		}
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteLine("base.Init();");
		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	private static void WriteCleanDirty(CodeWriter writer, Table table)
	{
		writer.WriteOpenRegion("CleanDirty");
		writer.WriteCommentSummary("Nastaví property holderům IsDirty na false.");
		writer.WriteLine("protected override void CleanDirty()");
		writer.WriteLine("{");
		writer.WriteLine("base.CleanDirty();");
		writer.WriteLine();

		foreach (Column column in TableHelper.GetPropertyColumns(table))
		{
			writer.WriteLine(String.Format("{0}.IsDirty = false;", PropertyHelper.GetPropertyHolderName(column)));
		}

		List<CollectionProperty> collectionProperties = TableHelper.GetCollectionColumns(table);
		foreach (CollectionProperty collectionProperty in collectionProperties)
		{
			writer.WriteLine(String.Format("{0}.IsDirty = false;", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
		}

		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	private static void WriteCheckConstraints(CodeWriter writer, Table table)
	{
		writer.WriteOpenRegion("CheckConstraints");
		writer.WriteCommentSummary("Kontroluje konzistenci objektu jako celku.");
		writer.WriteCommentRemarks("Automaticky je voláno před ukládáním objektu Save(), pokud je objekt opravdu ukládán.");
		writer.WriteLine("protected override void CheckConstraints()");
		writer.WriteLine("{");
		writer.WriteLine("base.CheckConstraints();");
		writer.WriteLine();

		foreach (Column column in TableHelper.GetDbReadWriteColumns(table))
		{
			string identifikaceHodnoty = ColumnHelper.IsReadOnly(column)
				? String.Format("PropertyHolder \\\"{0}\\\"", PropertyHelper.GetPropertyHolderName(column))
				: String.Format("Vlastnost \\\"{0}\\\"", PropertyHelper.GetPropertyName(column));

			if (PropertyHelper.IsString(column) && !ColumnHelper.IsLengthUnlimitedTextColumn(column))
			{
				writer.WriteLine(String.Format("if ({0}.IsDirty && ({0}.Value != null) && ({0}.Value.Length > {1}))", PropertyHelper.GetPropertyHolderName(column), ColumnHelper.GetColumnMaximumLength(column)));
				writer.WriteLine("{");
				writer.WriteLine(String.Format("throw new ConstraintViolationException(this, \"{0} - řetězec přesáhl maximální délku {1} znaků.\");", identifikaceHodnoty, ColumnHelper.GetColumnMaximumLength(column)));
				writer.WriteLine("}");
				writer.WriteLine();
			}

			if (TypeHelper.IsDateTime(column))
			{
				writer.WriteLine(String.Format("if ({0}.IsDirty)", PropertyHelper.GetPropertyHolderName(column)));
				writer.WriteLine("{");

				if (column.Nullable)
				{
					writer.WriteLine(String.Format("if ({0}.Value != null)", PropertyHelper.GetPropertyHolderName(column)));
					writer.WriteLine("{");
				}

				string value = PropertyHelper.GetPropertyHolderName(column) + ".Value";
				if (column.Nullable)
				{
					value = value + ".Value";
				}

				if (TypeHelper.ToSqlDbType(column.DataType) == SqlDbType.SmallDateTime)
				{
					// dotnet nemá strongtype range na SqlSmallDateTime
					writer.WriteLine(String.Format("if (({0} < Havit.Data.SqlTypes.SqlSmallDateTime.MinValue.Value) || ({0} > Havit.Data.SqlTypes.SqlSmallDateTime.MaxValue.Value))", value));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("throw new ConstraintViolationException(this, \"{0} nesmí nabývat hodnoty mimo rozsah SqlSmallDateTime.MinValue-SqlSmallDateTime.MaxValue.\");", identifikaceHodnoty));
					writer.WriteLine("}");
				}
				else
				{
					writer.WriteLine(String.Format("if (({0} < SqlDateTime.MinValue.Value) || ({0} > SqlDateTime.MaxValue.Value))", value));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("throw new ConstraintViolationException(this, \"{0} nesmí nabývat hodnoty mimo rozsah SqlDateTime.MinValue-SqlDateTime.MaxValue.\");", identifikaceHodnoty));
					writer.WriteLine("}");
				}

				if (TypeHelper.IsDateOnly(column.DataType))
				{
					writer.WriteLine();
					writer.WriteLine(String.Format("if ({0} != {0}.Date)", value));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("throw new ConstraintViolationException(this, \"{0} nesmí obsahovat časovou složku.\");", identifikaceHodnoty));
					writer.WriteLine("}");
				}

				if (column.Nullable)
				{
					writer.WriteLine("}");
				}

				writer.WriteLine("}");
				writer.WriteLine();
			}

			if (TypeHelper.IsBusinessObjectReference(column) && !column.Nullable)
			{
				writer.WriteLine(String.Format("if ({0}.IsDirty && ({0}.Value == null))", PropertyHelper.GetPropertyHolderName(column)));
				writer.WriteLine("{");
				writer.WriteLine(String.Format("throw new ConstraintViolationException(this, \"{0} nesmí nabývat hodnoty null.\");", identifikaceHodnoty));
				writer.WriteLine("}");
				writer.WriteLine();
			}

		}

		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	private static void WriteLoadGetDataRecord(CodeWriter writer, Table table)
	{
		writer.WriteCommentSummary("Načte data objektu z DB a vrátí je ve formě DataRecordu.");
		writer.WriteCommentLine("<param name=\"transaction\">Transakce.</param>");
		writer.WriteCommentLine("<returns>Úplná data objektu.</returns>");
		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed DataRecord Load_GetDataRecord(DbTransaction transaction)");
		writer.WriteLine("{");
		writer.WriteLine("DataRecord result;");
		writer.WriteLine();

		if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
		{
			writer.WriteLine("result = GetDataRecordFromCache(this.ID);");
			writer.WriteLine("if (result != null)");
			writer.WriteLine("{");
			writer.WriteLine("return result;");
			writer.WriteLine("}");
			writer.WriteLine();
		}

		StringBuilder select = new StringBuilder();
		select.Append("SELECT ");

		select.Append(TableHelper.GetSqlSelectFields(table, true));

		select.AppendFormat(" FROM {0} ", TableHelper.GetFullTableName(table));
		select.AppendFormat("WHERE [{0}] = @{0}", TableHelper.GetPrimaryKey(table).Name);

		writer.WriteLine(String.Format("DbCommand dbCommand = {0}.ProviderFactory.CreateCommand();", DatabaseHelper.GetDbConnector()));
		writer.WriteLine(String.Format("dbCommand.CommandText = \"{0}\";", select.ToString()));

		writer.WriteLine("dbCommand.Transaction = transaction;");
		writer.WriteLine();
		BusinessObjectSqlParameter.WriteSqlParameter(writer, TableHelper.GetPrimaryKey(table), "this.ID");
		writer.WriteLine();
		writer.WriteLine(String.Format("result = {0}.ExecuteDataRecord(dbCommand);", DatabaseHelper.GetDbConnector()));

		if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
		{
			writer.WriteLine("if (result != null)");
			writer.WriteLine("{");
			writer.WriteLine("AddDataRecordToCache(result);");
			writer.WriteLine("}");
		}

		writer.WriteLine();
		writer.WriteLine("return result;");

		writer.WriteLine("}");
		writer.WriteLine();
	}

	private static void WriteLoadParseDataRecord(CodeWriter writer, Table table)
	{
		writer.WriteCommentSummary("Vytahá data objektu z DataRecordu.");
		writer.WriteCommentLine("<param name=\"record\">DataRecord s daty objektu</param>");
		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed void Load_ParseDataRecord(DataRecord record)");
		writer.WriteLine("{");


		writer.WriteLine(String.Format("this.ID = record.Get<int>(\"{0}\");", TableHelper.GetPrimaryKey(table).Name));
		writer.WriteLine();

		foreach (Column column in TableHelper.GetPropertyColumns(table))
		{
			string fieldType = TypeHelper.GetFieldSystemTypeName(column);
			string propertyName = PropertyHelper.GetPropertyName(column);
			string propertyHolderName = PropertyHelper.GetPropertyHolderName(propertyName);

			if (TypeHelper.IsXml(column))
			{
				writer.WriteLine(String.Format("string _temp{0};", propertyName));
				writer.WriteLine(String.Format("if (record.TryGet<string>(\"{0}\", out _temp{1}))", column.Name, propertyName));
				writer.WriteLine("{");
				writer.WriteLine(String.Format("if (String.IsNullOrEmpty(_temp{0}))", propertyName));
				writer.WriteLine("{");
				writer.WriteLine(String.Format("{0}.Value = null;", propertyHolderName));
				writer.WriteLine("}");
				writer.WriteLine("else");
				writer.WriteLine("{");
				writer.WriteLine(String.Format("XmlDocument _tempXmlDocument{0} = new XmlDocument();", propertyName));
				writer.WriteLine(String.Format("_tempXmlDocument{0}.LoadXml(_temp{0});", propertyName));
				writer.WriteLine(String.Format("_tempXmlDocument{0}.NodeChanged += {0}_NodeChanged;", propertyName));
				writer.WriteLine(String.Format("{0}.Value = _tempXmlDocument{1};", propertyHolderName, propertyName));
				writer.WriteLine("}");
				writer.WriteLine("}");
				writer.WriteLine();
				continue;
			}

			// zvláštní případ pokud s XmlDocumentem chceme zacházet jako se stringem (což žádá jiné řešení, protože XmlDocument je zvláštní případ zacházení se stringem).
			if ((fieldType == "XmlDocument") && PropertyHelper.IsString(column))
			{
				fieldType = "string";
			}

			writer.WriteLine(String.Format("{0} _temp{1};", fieldType, propertyName));
			writer.WriteLine(String.Format("if (record.TryGet<{0}>(\"{1}\", out _temp{2}))", fieldType, column.Name, propertyName));
			writer.WriteLine("{");
			if (TypeHelper.IsBusinessObjectReference(column))
			{
				if (column.Nullable)
				{
					writer.WriteLine(String.Format("{0}.Value = (_temp{2} == null) ? null : {1}.GetObject(_temp{2}.Value);", propertyHolderName, TypeHelper.GetPropertyTypeName(column), propertyName));
				}
				else
				{
					writer.WriteLine(String.Format("{0}.Value = {1}.GetObject(_temp{2});", propertyHolderName, TypeHelper.GetPropertyTypeName(column), propertyName));
				}
			}
			else
			{
				if (TypeHelper.IsNonstandardType(column))
				{
					string converter = TypeHelper.GetNonstandarPropertyTypeConverterName(column);
					if (!String.IsNullOrEmpty(converter))
					{
						writer.WriteLine(String.Format("{0}.Value = {1}.ConvertFrom(_temp{2});", propertyHolderName, ConverterHelper.GetFieldConvertorName(column), propertyName));
					}
					else
					{
						string cast = TypeHelper.GetPropertyTypeName(column) == fieldType ? "" : "(" + TypeHelper.GetPropertyTypeName(column) + ")"; // podmínka pro prázdným řetězce řeší zvláštní případ při konverzi XmlDocument na string.
						writer.WriteLine(String.Format("{0}.Value = {1}_temp{2};", propertyHolderName, cast, propertyName));
					}
				}
				else
				{
					if (fieldType == "string")
					{
						writer.WriteLine(String.Format("{0}.Value = _temp{1} ?? String.Empty;", propertyHolderName, propertyName));
					}
					else
					{
						writer.WriteLine(String.Format("{0}.Value = _temp{1};", propertyHolderName, propertyName));
					}
				}
			}
			writer.WriteLine("}");
			writer.WriteLine();
		}

		foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
		{
			writer.WriteLine(String.Format("string _temp{0};", collectionProperty.PropertyName));
			writer.WriteLine(String.Format("if (record.TryGet<string>(\"{0}\", out _temp{0}))", collectionProperty.PropertyName));
			writer.WriteLine("{");
			writer.WriteLine(String.Format("{0}.Initialize(_temp{1});", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName), collectionProperty.PropertyName));

			if (TableHelper.IsReadOnly(table))
			{
				writer.WriteLine(String.Format("{0}.Value.Freeze();", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
			}

			writer.WriteLine("}");
			writer.WriteLine();
		}


		writer.WriteLine("}"); // method


	}

	public static void WriteSaveSaveMembers(CodeWriter writer, Table table)
	{
		writer.WriteCommentSummary("Ukládá member-objekty.");
		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed void Save_SaveMembers(DbTransaction transaction)");
		writer.WriteLine("{");
		writer.WriteLine("base.Save_SaveMembers(transaction);");
		writer.WriteLine();

		if (TableHelper.IsReadOnly(table))
		{
			writer.WriteLine("// Neukládáme, jsme read-only třídou.");
		}
		else
		{
			bool wasFirst = false;
			foreach (Column column in TableHelper.GetDbReadWriteColumns(table))
			{
				if (TypeHelper.IsBusinessObjectReference(column))
				{
					string propertyHolderName = PropertyHelper.GetPropertyHolderName(column);
					writer.WriteLine(String.Format("if ({0}.IsInitialized && ({0}.Value != null))", propertyHolderName));
					writer.WriteLine("{");
					writer.WriteLine(String.Format("{0}.Value.Save(transaction);", propertyHolderName));
					writer.WriteLine("}");
					writer.WriteLine();
					wasFirst = true;
				}
			}

			if (!wasFirst)
			{
				writer.WriteLine("// Není co ukládat.");
			}
		}
		writer.WriteLine("}");
		writer.WriteLine();

	}

	public static void WriteSaveSaveCollections(CodeWriter writer, Table table)
	{
		writer.WriteCommentSummary("Ukládá member-kolekce objektu.");
		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed void Save_SaveCollections(DbTransaction transaction)");
		writer.WriteLine("{");
		writer.WriteLine("base.Save_SaveCollections(transaction);");
		writer.WriteLine();

		if (TableHelper.IsReadOnly(table))
		{
			writer.WriteLine("// Neukládáme, jsme read-only třídou.");
		}
		else
		{
			bool wasFirst = false;

			foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
			{
				string propertyHolderName = PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName);
				writer.WriteLine(String.Format("if ({0}.IsInitialized)", propertyHolderName));
				writer.WriteLine("{");
				writer.WriteLine(String.Format("{0}.Value.SaveAll(transaction);", propertyHolderName));
				writer.WriteLine("}");
				writer.WriteLine();
				wasFirst = true;
			}

			if (!wasFirst)
			{
				writer.WriteLine("// Není co ukládat.");
			}
		}
		writer.WriteLine("}");
		writer.WriteLine();
	}

	public static void WriteSaveUpdate(CodeWriter writer, Table table)
	{
		writer.WriteCommentSummary("Implementace metody aktualizuje data objektu v databázi.");
		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed void Save_Update(DbTransaction transaction)");
		writer.WriteLine("{");

		if (!WriteExceptionForReadOnlyTables(writer, table))
		{
			Column deletedColumn = TableHelper.GetDeletedColumn(table);

			writer.WriteLine(String.Format("DbCommand dbCommand = {0}.ProviderFactory.CreateCommand();", DatabaseHelper.GetDbConnector()));
			writer.WriteLine("dbCommand.Transaction = transaction;");
			writer.WriteLine();
			writer.WriteLine("StringBuilder commandBuilder = new StringBuilder();");
			writer.WriteLine(String.Format("commandBuilder.Append(\"UPDATE {0} SET \");", TableHelper.GetFullTableName(table)));
			writer.WriteLine();
			writer.WriteLine("bool dirtyFieldExists = false;");
			if (TableHelper.IsCachable(table) && (deletedColumn != null))
			{
				writer.WriteLine("bool deletedFieldIsDirty = false;");
			}

			foreach (Column column in TableHelper.GetDbReadWriteColumns(table))
			{
				writer.WriteLine(String.Format("if ({0}.IsDirty)", PropertyHelper.GetPropertyHolderName(column)));
				writer.WriteLine("{");
				writer.WriteLine("if (dirtyFieldExists)");
				writer.WriteLine("{");
				writer.WriteLine("commandBuilder.Append(\", \");");
				writer.WriteLine("}");
				writer.WriteLine(String.Format("commandBuilder.Append(\"[{0}] = @{0}\");", column.Name));
				writer.WriteLine();
				BusinessObjectSqlParameter.WriteSqlParameter(writer, column);
				writer.WriteLine();
				writer.WriteLine("dirtyFieldExists = true;");
				if (TableHelper.IsCachable(table) && (column == deletedColumn))
				{
					writer.WriteLine("deletedFieldIsDirty = true;");
				}
				writer.WriteLine("}");
				writer.WriteLine();
			}

			writer.WriteLine("if (dirtyFieldExists)");
			writer.WriteLine("{");
			writer.WriteLine("// objekt je sice IsDirty (volá se tato metoda), ale může být změněná jen kolekce");
			writer.WriteLine(String.Format("commandBuilder.Append(\" WHERE [{0}] = @{0}; \");", TableHelper.GetPrimaryKey(table).Name));
			writer.WriteLine("}");
			writer.WriteLine("else");
			writer.WriteLine("{");
			writer.WriteLine("commandBuilder = new StringBuilder();");
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteLine("bool dirtyCollectionExists = false;");
			// chceme zjistit, zda bude zapsána nějaká kolekce, která používá DeletedDateTime
			// takovou informaci vrací WriteSaveUpdate_Collections, jenže my chceme vypsat kód ještě před tuto metodu
			// proto metodu zavoláme z fake-ovým CodeWriterem
			WriteSaveUpdate_Collections(new CodeWriter("::nofile::", false), table, false, out bool shouldWriteDeletedDateTimeSqlParameter);
			if (shouldWriteDeletedDateTimeSqlParameter)
			{
				writer.WriteLine("bool dirtyCollectionWithDeletedDateTimeExists = false;");
			}

			// nyní skutečný zápis kódu;
			WriteSaveUpdate_Collections(writer, table, false, out shouldWriteDeletedDateTimeSqlParameter);

			writer.WriteLine("// pokud je objekt dirty, ale žádná property není dirty (Save_MinimalInsert poukládal všechno), neukládáme");
			writer.WriteLine("if (dirtyFieldExists || dirtyCollectionExists)");
			writer.WriteLine("{");

			BusinessObjectSqlParameter.WriteSqlParameter(writer, TableHelper.GetPrimaryKey(table), "this.ID");

			if (shouldWriteDeletedDateTimeSqlParameter)
			{
				writer.WriteLine();
				writer.WriteLine("if (dirtyCollectionWithDeletedDateTimeExists)");
				writer.WriteLine("{");
				BusinessObjectSqlParameter.WriteDeletedDateTimeSqlParameter(writer);
				writer.WriteLine("}");
				writer.WriteLine();
			}

			writer.WriteLine("dbCommand.CommandText = commandBuilder.ToString();");
			writer.WriteLine(String.Format("{0}.ExecuteNonQuery(dbCommand);", DatabaseHelper.GetDbConnector()));
			writer.WriteLine("}");

			writer.WriteLine();
			if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
			{
				// nemáme závislé pomocí CacheDependency na InvalidateSaveCacheDependencyKey z důvodu výrazné paměťové úspory
				writer.WriteLine("RemoveDataRecordFromCache();");
			}

			if (TableHelper.IsCachable(table) && (deletedColumn != null))
			{
				writer.WriteLine("if (deletedFieldIsDirty)");
				writer.WriteLine("{");
				writer.WriteLine("RemoveAllIDsFromCache();");
				writer.WriteLine("}");
			}

			writer.WriteLine("InvalidateSaveCacheDependencyKey();");
			writer.WriteLine("InvalidateAnySaveCacheDependencyKey();");
		}

		writer.WriteLine("}");
		writer.WriteLine();
	}

	private static void WriteSaveUpdate_Collections(CodeWriter writer, Table table, bool deleteMode, out bool shouldWriteDeletedDateTimeSqlParameter)
	{
		shouldWriteDeletedDateTimeSqlParameter = false;
		foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
		{
			Column deletedColumn = TableHelper.GetDeletedColumn(collectionProperty.TargetTable);

			if (collectionProperty.JoinTable == null)
			{
				// vztah 1:N

				writer.WriteLine(String.Format("if ({0}.IsDirty)", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
				writer.WriteLine("{");

				writer.WriteLine(String.Format("if ({0}.LoadedValue.Any())", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
				writer.WriteLine("{");

				// dříve zde byl místo Where FindAll, ale ten způsoboval LoadAll. Takže podmínka na ghosta (IsLoaded) neměla význam a občas uložení způsobilo deadock.
				// pokud není object loaded, nemůže být ani deleted, ani nemůže patřit někomu jinému, takový potřebujeme odmazat
				// pokud je loaded, pak potřebujeme odmazat ty, které nejslou odmazané jinak a zároveň nepatří někomu jinému
				writer.WriteLine(
					String.Format(
						"{1} _{0}ToRemove = new {1}({2}.LoadedValue.Except({2}.Value).Where(item => !item.IsLoaded || (!item.IsDeleted && (item.{3} == this))));",
						ConventionsHelper.GetCammelCase(collectionProperty.PropertyName), // 0
						ClassHelper.GetCollectionClassFullName(collectionProperty.TargetTable), // 1
						PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName), // 2
						PropertyHelper.GetPropertyName(collectionProperty.ReferenceColumn))); // 3

				writer.WriteLine(
					String.Format("if (_{0}ToRemove.Count > 0)", ConventionsHelper.GetCammelCase(collectionProperty.PropertyName)));

				writer.WriteLine("{");
				if (!deleteMode)
				{
					writer.WriteLine("dirtyCollectionExists = true;");
					if ((!collectionProperty.ReferenceColumn.Nullable) && (deletedColumn != null) && TypeHelper.IsDateTime(deletedColumn))
					{
						writer.WriteLine("dirtyCollectionWithDeletedDateTimeExists = true;");
					}
				}

				string idsCondition;
				//bool optionRecompile;

				//if (GeneratorSettings.TargetPlatform >= TargetPlatform.SqlServer2008)
				//{
				idsCondition = String.Format("SELECT [Value] FROM @{0}", collectionProperty.PropertyName);
				//	optionRecompile = false;
				//}
				//else
				//{
				//	idsCondition = String.Format("SELECT [Value] FROM dbo.IntArrayToTable(@{0})", collectionProperty.PropertyName);
				//	optionRecompile = true;
				//}

				string commandPart = "UPDATE";

				string setPart = null;
				string notDeletedPart = null;

				if (collectionProperty.ReferenceColumn.Nullable)
				{
					// pokud cizí klíč může obsahovat null, záznam od kolekce odpojíme

					// cizí klíč nullable, máme sloupec deleted
					// pokud jsou v kolekci jen nesmazané záznamy, odpojíme jen nesmazané záznamy								
					setPart = String.Format("SET [{0}] = NULL", collectionProperty.ReferenceColumn.Name);

					if (!collectionProperty.IncludeDeleted && (deletedColumn != null))
					{
						if (deletedColumn.DataType.SqlDataType == SqlDataType.Bit)
						{
							notDeletedPart = String.Format("AND ([{0}] = 0)", deletedColumn.Name);
						}

						if (TypeHelper.IsDateTime(deletedColumn))
						{
							notDeletedPart = String.Format("AND ([{0}] IS NULL)", deletedColumn.Name);
						}
					}
					else
					{
						notDeletedPart = "";
					}
				}
				else
				{
					// pokud nepovoluje cizí klíč hodnotu null, rozhodneme se, co dělat
					// podle toho, zda existuje sloupec indikující smazaný záznam.
					if (deletedColumn != null)
					{
						// existuje sloupec indikující smazaný záznam -> nastavíme mu hodnotu
						if (deletedColumn.DataType.SqlDataType == SqlDataType.Bit)
						{
							setPart = String.Format("SET [{0}] = 1", deletedColumn.Name);
							notDeletedPart = String.Format("AND ([{0}] = 0)", deletedColumn.Name);
						}
						else if (TypeHelper.IsDateTime(deletedColumn))
						{
							setPart = String.Format("SET [{0}] = @DeletedDateTime", deletedColumn.Name);
							notDeletedPart = String.Format("AND ([{0}] IS NULL)", deletedColumn.Name);
							shouldWriteDeletedDateTimeSqlParameter = true;
						}
						else
						{
							throw new ApplicationException(
								String.Format(
									"Tabulka {0}: Sloupec {1} pro smazané záznamy není podporovaného typu.",
									collectionProperty.TargetTable.Name,
									deletedColumn.Name));
						}
					}
					else
					{
						commandPart = "DELETE FROM";
						setPart = "";
						notDeletedPart = "";
					}
				}

				//if (optionRecompile)
				//{
				//	writer.WriteLine(
				//		"// OPTION (RECOMPILE): workaround pro http://connect.microsoft.com/SQLServer/feedback/ViewFeedback.aspx?FeedbackID=256717");
				//}

				writer.WriteLine(
					String.Format(
						"commandBuilder.AppendFormat(\"{0} [{1}].[{2}] {3}WHERE ([{5}] = @{6}) {7}AND [{4}] IN ({8}){9};\");",
						commandPart,
						// 0 ... UPDATE vs. DELETE FROM
						collectionProperty.TargetTable.Schema,
						// 1
						collectionProperty.TargetTable.Name,
						// 2
						String.IsNullOrEmpty(setPart) ? "" : setPart + " ",
						// 3 ... SET FK = NULL vs. SET Deleted = 0 vs. Deleted IS NULL vs. (nic)
						TableHelper.GetPrimaryKey(collectionProperty.TargetTable).Name,
						// 4
						collectionProperty.ReferenceColumn.Name,
						// 5 ... (5+6) záznamy patřící do kolekce
						TableHelper.GetPrimaryKey(table).Name,
						// 6 ... (5+6) záznamy patřící do kolekce
						String.IsNullOrEmpty(notDeletedPart) ? "" : notDeletedPart + " ",
						// 7 ... které ještě nejsou smazané
						idsCondition,
						// 8 ... a nejsou v kolekci hodnot, které mají zůstat
						/*optionRecompile ? " OPTION (RECOMPILE)" :*/ "")); //9

				BusinessObjectSqlParameter.WriteCollectionSqlParameter(
					writer,
					collectionProperty,
					String.Format("_{0}ToRemove.GetIDs()", ConventionsHelper.GetCammelCase(collectionProperty.PropertyName)));

				writer.WriteLine("}");

				writer.WriteLine("}");

				writer.WriteLine(String.Format("{0}.UpdateLoadedValue();", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));

			}
			else
			{
				// vztah M:N
				// ještě by bylo možné smazat jen ty, co nemáme v kolekci a přidat ty, které tam ještě nejsou, pak samozřejmě pozor na ten "if"

				writer.WriteLine(
					String.Format("if ({0}.IsDirty)", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
				writer.WriteLine("{");
				if (!deleteMode)
				{
					writer.WriteLine("dirtyCollectionExists = true;");
				}

				writer.WriteLine(
					String.Format(
						"commandBuilder.AppendFormat(\"DELETE FROM {0} WHERE [{1}] = @{2}; \");",
						TableHelper.GetFullTableName(collectionProperty.JoinTable),
						collectionProperty.ReferenceColumn.Name,
						TableHelper.GetPrimaryKey(table).Name));
				writer.WriteLine(
					String.Format("if ({0}.Value.Count > 0)", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
				writer.WriteLine("{");
				WriteInsertMNCollectionData(writer, table, collectionProperty, "commandBuilder");
				writer.WriteLine("}");
			}

			writer.WriteLine("}");
			writer.WriteLine();
		}
	}

	public static void WriteSaveFullInsert(CodeWriter writer, Table table)
	{
		WriteSaveInsert(writer, table, true);
	}

	public static void WriteSaveMinimalInsert(CodeWriter writer, Table table)
	{
		WriteSaveInsert(writer, table, false);
	}

	private static void WriteSaveInsert(CodeWriter writer, Table table, bool fullInsert)
	{
		// hlavička metody
		if (fullInsert)
		{
			writer.WriteCommentSummary("Implementace metody vloží nový objekt do databáze a nastaví nově přidělené ID (primární klíč).");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("protected override sealed void Save_FullInsert(DbTransaction transaction)");
		}
		else
		{
			writer.WriteCommentSummary("Implementace metody vloží jen not-null vlastnosti objektu do databáze a nastaví nově přidělené ID (primární klíč).");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("public override sealed void Save_MinimalInsert(DbTransaction transaction)");
		}
		writer.WriteLine("{");

		if (!WriteExceptionForReadOnlyTables(writer, table))
		{
			// v minimal insertu zavoláme Save_Insert_InsertRequiredForMinimalInsert
			if (!fullInsert)
			{
				writer.WriteLine("base.Save_MinimalInsert(transaction);");
				writer.WriteLine("Save_Insert_InsertRequiredForMinimalInsert(transaction);");
				writer.WriteLine();
			}

			writer.WriteLine("DbCommand dbCommand;");
			writer.WriteLine(String.Format("dbCommand = {0}.ProviderFactory.CreateCommand();", DatabaseHelper.GetDbConnector()));
			writer.WriteLine("dbCommand.Transaction = transaction;");
			writer.WriteLine();

			Column primaryKeyColumn = TableHelper.GetPrimaryKey(table);
			bool primaryKeyUsesDefaultInsteadOfIdentity = !primaryKeyColumn.Identity && !String.IsNullOrEmpty(primaryKeyColumn.DefaultConstraint?.Text);

			StringBuilder commandBuilder = new StringBuilder();
			StringBuilder fields = new StringBuilder(); // sloupce, které se insertují, pokud použijeme autoincrement na ID
			StringBuilder fieldsWithID = new StringBuilder(); // sloupce, které se insertují, pokud insertujeme i ID
			StringBuilder values = new StringBuilder(); // sloupce, které se insertují, pokud použijeme autoincrement na ID
			StringBuilder valuesWithID = new StringBuilder(); // sloupce, které se insertují, pokud insertujeme i ID

			bool wasFirstColumn = false;

			foreach (Column column in TableHelper.GetDbReadWriteColumns(table))
			{
				// ukládat všechny sloupce, pokud jde o full insert
				// pokud jde o minimal insert, ukládá všechny hodnoty, které nejsou cizím klíčem a not null cizí klíče
				if (fullInsert || !TypeHelper.IsBusinessObjectReference(column) || !column.Nullable)
				{
					if (!column.InPrimaryKey && !ColumnHelper.IsIgnored(column))
					{
						if (wasFirstColumn)
						{
							fields.Append(", ");
							values.Append(", ");
						}
						fields.AppendFormat("[{0}]", column.Name);
						values.AppendFormat("@{0}", column.Name);

						fieldsWithID.Append(", ");
						fieldsWithID.AppendFormat("[{0}]", column.Name);

						valuesWithID.Append(", ");
						valuesWithID.AppendFormat("@{0}", column.Name);

						BusinessObjectSqlParameter.WriteSqlParameter(writer, column);
						writer.WriteLine(String.Format("{0}.IsDirty = false;", PropertyHelper.GetPropertyHolderName(column)));
						writer.WriteLine();
						wasFirstColumn = true;
					}
				}
			}

			// pro Havit i Exec generujeme proměnnou pro vrácení ID vloženého objektu

			// ať už je použit autoincrement nebo deklarujeme hodnotu pro ID vloženého záznamu
			// tu můžeme potřebovat pro vkládání položek M:N vztahu
			commandBuilder.AppendFormat("DECLARE @{0} INT; ", primaryKeyColumn.Name);
			if (primaryKeyUsesDefaultInsteadOfIdentity)
			{
				// pokud nepoužíváme identitu, tak se plně spoléháme na existenci defaultu (např. sekvence)
				// vložené ID se dá do tabulky @inserted, odkud ho dáme do proměnné (protože můžé být potřeba pro uložení vazeb M:N)					

				// teoreticky by šlo dopracovat podpora vložení objektů se známým ID, nyní není podporováno

				commandBuilder.AppendFormat("DECLARE @inserted TABLE ({0} INT); ", primaryKeyColumn.Name);
			}

			string outputClause = primaryKeyUsesDefaultInsteadOfIdentity
				? String.Format(" OUTPUT INSERTED.{0} into @inserted ({0})", primaryKeyColumn.Name) // začíná mezerou!
				: "";
			if (GeneratorSettings.Strategy.IsAnyHavitStrategy())
			{
				if (wasFirstColumn)
				{
					commandBuilder.AppendFormat("INSERT INTO {0} ({2}){1} VALUES ({3}); ",
						TableHelper.GetFullTableName(table),
						outputClause,
						fields,
						values);
				}
				else
				{
					commandBuilder.AppendFormat("INSERT INTO {0}{1} DEFAULT VALUES; ",
						TableHelper.GetFullTableName(table),
						outputClause);
				}

				if (primaryKeyUsesDefaultInsteadOfIdentity)
				{
					// vyzvedneme vložené ID z tabulky @inserted, kam jsme jej uložili pomocí OUTPUT clause
					commandBuilder.AppendFormat("SELECT @{0} = {0} FROM @inserted; ", primaryKeyColumn.Name);
				}
				else
				{
					// vyzvedneme ID z funkce
					commandBuilder.AppendFormat("SELECT @{0} = SCOPE_IDENTITY(); ", primaryKeyColumn.Name);
				}
			}

			if (GeneratorSettings.Strategy == GeneratorStrategy.Exec)
			{
				commandBuilder.AppendFormat("EXEC [{1}].GI_{2} @{0} OUTPUT; ", primaryKeyColumn.Name, table.Schema, table.Name);

				if (wasFirstColumn)
				{
					fields.Insert(0, "[" + primaryKeyColumn.Name + "], ");
					values.Insert(0, "@" + primaryKeyColumn.Name + ", ");
				}
				else
				{
					fields.Insert(0, "[" + primaryKeyColumn.Name + "]");
					values.Insert(0, "@" + primaryKeyColumn.Name);
				}

				commandBuilder.AppendFormat("INSERT INTO {0} ({1}) VALUES ({2}); ",
					TableHelper.GetFullTableName(table),
					fields,
					values);
			}

			// kolekce ukládáme jen ve full insertu
			List<CollectionProperty> colectionProperties = TableHelper.GetCollectionColumns(table);
			bool hasManyToManyCollection = colectionProperties.Any(colectionProperty => colectionProperty.IsManyToMany);
			if (fullInsert)
			{
				if (hasManyToManyCollection)
				{
					writer.WriteLine("StringBuilder collectionCommandBuilder = new StringBuilder();");
					writer.WriteLine();
				}

				foreach (CollectionProperty collectionProperty in colectionProperties)
				{
					if (collectionProperty.IsManyToMany)
					{
						writer.WriteLine(String.Format("if ({0}.Value.Count > 0)", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
						writer.WriteLine("{");

						WriteInsertMNCollectionData(writer, table, collectionProperty, "collectionCommandBuilder");

						writer.WriteLine(String.Format("{0}.UpdateLoadedValue();", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
						writer.WriteLine("}");
						writer.WriteLine();
					}
					else
					{
						// řeší Bug 67401: BusinessLayer - uložení objektu do kolekce a odebrání z kolekce v témže scope neuloží odebrání objektu
						// nemám lepší místo, kam kód umístit
						writer.WriteLine(String.Format("if ({0}.IsDirty)", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
						writer.WriteLine("{");
						writer.WriteLine(String.Format("{0}.UpdateLoadedValue();", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
						writer.WriteLine("}");
						writer.WriteLine();
					}
				}
			}

			// pro SQL2005 generujeme normální insert
			string commandText = commandBuilder.ToString() + (fullInsert && hasManyToManyCollection ? "\" + collectionCommandBuilder.ToString() + \"" : "");
			commandText += String.Format("SELECT @{0}; ", primaryKeyColumn.Name);
			writer.WriteLine(String.Format("dbCommand.CommandText = \"{0}\";", commandText));
			writer.WriteLine(String.Format("this.ID = (int){0}.ExecuteScalar(dbCommand);", DatabaseHelper.GetDbConnector()));

			writer.WriteLine("this.IsNew = false; // uložený objekt není už nový, dostal i přidělené ID");
			writer.WriteLine();
			writer.WriteLine("IdentityMap currentIdentityMap = IdentityMapScope.Current;");
			writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Assert(currentIdentityMap != null, \"currentIdentityMap != null\");");
			writer.WriteMicrosoftContract("global::System.Diagnostics.Contracts.Contract.Assume(currentIdentityMap != null);");
			writer.WriteLine("currentIdentityMap.Store(this);");

			if (fullInsert)
			{
				writer.WriteLine();
				if (TableHelper.IsCachable(table))
				{
					// nemáme závislé pomocí CacheDependency na InvalidateAnySaveCacheDependencyKey z důvodu výrazné paměťové úspory
					writer.WriteLine("RemoveAllIDsFromCache();");
				}
				writer.WriteLine("InvalidateAnySaveCacheDependencyKey();");
			}
			else
			{
				if (TableHelper.IsCachable(table))
				{
					writer.WriteLine();
					// Potřebujeme vyhodit z cache záznamy GetAll.
					// Následný Save_Update je vyhazuje pouze tehdy, pokud se změní Deleted. Ten se však nezmění, proto nejsou záznamy vyhozeny.
					// Následný Save_Update však vyhodí volá InvalidateSaveCacheDependencyKey() i InvalidateAnySaveCacheDependencyKey(), proto zde je vyhazovat nemusíme.
					writer.WriteLine("RemoveAllIDsFromCache();");
				}
			}
		}

		writer.WriteLine("}");
		writer.WriteLine();
	}

	public static void WriteDelete(CodeWriter writer, Table table)
	{
		List<Column> ownerColumns = TableHelper.GetOwnerColumns(table);
		List<string> lines = new List<string>();
		//bool wasRemove = false;
		foreach (Column ownerColumn in ownerColumns)
		{
			Table ownerTable = ColumnHelper.GetReferencedTable(ownerColumn);
			List<CollectionProperty> collectionProperties = TableHelper.GetCollectionColumns(ownerTable);
			foreach (CollectionProperty collectionProperty in collectionProperties)
			{
				if (collectionProperty.ReferenceColumn == ownerColumn)
				{
					lines.Add(String.Format("{0}.{1}.Remove(({2})this);", PropertyHelper.GetPropertyName(ownerColumn), collectionProperty.PropertyName, ClassHelper.GetClassName(table)));
					//wasRemove = true;
				}
			}
		}

		Column deletedColumn = TableHelper.GetDeletedColumn(table);

		if ((lines.Count > 0) || (deletedColumn != null))
		{
			writer.WriteLine("/// <summary>");
			writer.WriteLine("/// Smaže objekt, nebo ho označí jako smazaný, podle zvolené logiky. Změnu uloží do databáze, v transakci.");
			writer.WriteLine("/// </summary>");
			writer.WriteLine("/// <remarks>");
			writer.WriteLine("/// Neprovede se, pokud je již objekt smazán.");
			writer.WriteLine("/// </remarks>");
			writer.WriteLine("/// <param name=\"transaction\">Transakce DbTransaction, v rámci které se smazání provede; null, pokud bez transakce.</param>");

			writer.WriteLine("public override void Delete(DbTransaction transaction)");
			writer.WriteLine("{");
			if (!WriteExceptionForReadOnlyTables(writer, table))
			{
				writer.WriteLines(lines.ToArray());

				if (deletedColumn != null)
				{
					if (deletedColumn.DataType.SqlDataType == SqlDataType.Bit)
					{
						writer.WriteLine("EnsureLoaded(transaction);");
						writer.WriteLine("if (!Deleted)");
						writer.WriteLine("{");
						writer.WriteLine("Deleted = true;");
						writer.WriteLine("}");
					}
					if (TypeHelper.IsDateTime(deletedColumn))
					{
						writer.WriteLine("EnsureLoaded(transaction);");
						writer.WriteLine("if (Deleted == null)");
						writer.WriteLine("{");
						writer.WriteLine(String.Format("Deleted = {0};", ApplicationTimeHelper.GetApplicationCurrentTimeExpression()));
						writer.WriteLine("}");
					}
				}
				writer.WriteLine("base.Delete(transaction);");
			}
			writer.WriteLine("}");
			writer.WriteLine();
		}
	}

	public static void WriteDeletePerform(CodeWriter writer, Table table)
	{
		if (TableHelper.IsReadOnly(table))
		{
			writer.WriteCommentSummary("Objekt je typu readonly. Metoda vyhazuje výjimku InvalidOperationException.");
		}
		else
		{
			if (TableHelper.GetDeletedColumn(table) == null)
			{
				writer.WriteCommentSummary("Metoda vymaže objekt z perzistentního uložiště.");
			}
			else
			{
				writer.WriteCommentSummary("Metoda označí objekt jako smazaný a uloží jej.");
			}
		}

		writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
		writer.WriteLine("protected override sealed void Delete_Perform(DbTransaction transaction)");
		writer.WriteLine("{");
		if (!WriteExceptionForReadOnlyTables(writer, table))
		{
			Column deletedColumn = TableHelper.GetDeletedColumn(table);
			if (deletedColumn != null)
			{
				writer.WriteLine("Save_Update(transaction);");
			}
			else
			{
				writer.WriteLine(String.Format("DbCommand dbCommand = {0}.ProviderFactory.CreateCommand();", DatabaseHelper.GetDbConnector()));
				writer.WriteLine("dbCommand.Transaction = transaction;");
				writer.WriteLine();
				writer.WriteLine("StringBuilder commandBuilder = new StringBuilder();");
				bool shouldWriteDeletedDateTimeSqlParameter;
				WriteSaveUpdate_Collections(writer, table, true, out shouldWriteDeletedDateTimeSqlParameter);

				writer.WriteLine(String.Format("commandBuilder.AppendFormat(\"DELETE FROM {0} WHERE [{1}] = @{1}\");",
					TableHelper.GetFullTableName(table),
					TableHelper.GetPrimaryKey(table).Name));
				writer.WriteLine();
				BusinessObjectSqlParameter.WriteSqlParameter(writer, TableHelper.GetPrimaryKey(table), "this.ID");
				writer.WriteLine();

				if (shouldWriteDeletedDateTimeSqlParameter)
				{
					BusinessObjectSqlParameter.WriteDeletedDateTimeSqlParameter(writer);
					writer.WriteLine();
				}

				writer.WriteLine("dbCommand.CommandText = commandBuilder.ToString();");
				writer.WriteLine(String.Format("{0}.ExecuteNonQuery(dbCommand);", DatabaseHelper.GetDbConnector()));

				writer.WriteLine();
				if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
				{
					// nemáme závislé pomocí CacheDependency na InvalidateSaveCacheDependencyKey z důvodu výrazné paměťové úspory
					writer.WriteLine("RemoveDataRecordFromCache();");
					writer.WriteLine("RemoveAllIDsFromCache();");
				}
				writer.WriteLine("InvalidateSaveCacheDependencyKey();");
				writer.WriteLine("InvalidateAnySaveCacheDependencyKey();");
			}
		}
		writer.WriteLine("}");
		writer.WriteLine();
	}

	private static bool WriteExceptionForReadOnlyTables(CodeWriter writer, Table table)
	{
		if (TableHelper.IsReadOnly(table))
		{
			writer.WriteLine(String.Format("throw new InvalidOperationException(\"Objekty třídy {0} jsou určeny jen pro čtení.\");", ClassHelper.GetClassFullName(table)));
			return true;
		}
		return false;
	}

	public static void WriteCacheBusinessObjectMethods(CodeWriter writer, Table table)
	{
		if (TableHelper.IsCachable(table) && TableHelper.CanCacheBusinessObjectInstances(table))
		{
			writer.WriteOpenRegion("BusinessObject cache access methods");
			writer.WriteCommentSummary("Vrátí název klíče pro business object.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("protected static string GetBusinessObjectCacheKey(int id)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("return \"BL|{0}|\" + id;", CacheHelper.GetCacheKeyCore(table)));
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Přidá business object do cache.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("protected static void AddBusinessObjectToCache(BusinessObjectBase businessObject)");
			writer.WriteLine("{");
			string cacheOptions = CacheHelper.WriteCacheOptionsCode(writer, table);
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.AddBusinessObjectToCache(typeof({0}), GetBusinessObjectCacheKey(businessObject.ID), businessObject{1});",
				ClassHelper.GetClassName(table),
				String.IsNullOrEmpty(cacheOptions)
				? ""
				: ", " + cacheOptions));
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Vyhledá v cache business object pro objekt daného ID a vrátí jej. Není-li v cache nalezen, vrací null.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("internal static BusinessObjectBase GetBusinessObjectFromCache(int id)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("return Havit.Business.BusinessLayerContext.BusinessLayerCacheService.GetBusinessObjectFromCache(typeof({0}), GetBusinessObjectCacheKey(id));",
									ClassHelper.GetClassName(table)));
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCloseRegion();
		}
	}

	public static void WriteCacheDataRecordsMethods(CodeWriter writer, Table table)
	{
		if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
		{
			writer.WriteOpenRegion("DataRecord cache access methods");

			writer.WriteCommentSummary("Vrátí název klíče pro data record objektu s daným ID.");
			writer.WriteLine("private static string GetDataRecordCacheKey(int id)");
			writer.WriteLine("{");
			writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Requires(id != BusinessObjectBase.NoID, \"id != BusinessObjectBase.NoID\");");
			writer.WriteHavitContract("");
			writer.WriteLine(String.Format("return \"BL|{0}|\" + id;", CacheHelper.GetCacheKeyCore(table)));
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Přidá DataRecord do cache.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("internal void AddDataRecordToCache(DataRecord dataRecord)");
			writer.WriteLine("{");
			string cacheOptions = CacheHelper.WriteCacheOptionsCode(writer, table);
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.AddDataRecordToCache(typeof({0}), GetDataRecordCacheKey(this.ID), dataRecord{1});",
				ClassHelper.GetClassName(table),
				String.IsNullOrEmpty(cacheOptions)
				? ""
				: ", " + cacheOptions));
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Vyhledá v cache DataRecord pro objekt daného ID a vrátí jej. Není-li v cache nalezen, vrací null.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("internal static DataRecord GetDataRecordFromCache(int id)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("return Havit.Business.BusinessLayerContext.BusinessLayerCacheService.GetDataRecordFromCache(typeof({0}), GetDataRecordCacheKey(id));",
				ClassHelper.GetClassName(table)));
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Odstraní DataRecord z cache.");
			writer.WriteLine("private void RemoveDataRecordFromCache()");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.RemoveDataRecordFromCache(typeof({0}), GetDataRecordCacheKey(this.ID));",
				ClassHelper.GetClassName(table)));
			writer.WriteLine("}");

			writer.WriteCloseRegion();
		}
	}

	private static void WriteCacheAllIDsMethods(CodeWriter writer, Table table)
	{
		if (TableHelper.IsCachable(table))
		{
			bool hasDeletedColumn = TableHelper.GetDeletedColumn(table) != null;

			writer.WriteOpenRegion("GetAll IDs cache access methods");

			writer.WriteCommentSummary("Vrátí název klíče pro kolekci IDs metody GetAll.");
			writer.WriteLine(String.Format("private static string GetAllIDsCacheKey({0})", hasDeletedColumn ? "bool includeDeleted" : ""));
			writer.WriteLine("{");

			if (hasDeletedColumn)
			{
				writer.WriteLine(String.Format("return \"BL|{0}|GetAll|\" + includeDeleted;", CacheHelper.GetCacheKeyCore(table)));
			}
			else
			{
				writer.WriteLine(String.Format("return \"BL|{0}|GetAll\";", CacheHelper.GetCacheKeyCore(table)));
			}

			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Vyhledá v cache pole IDs metody GetAll a vrátí jej. Není-li v cache nalezena, vrací null.");
			writer.WriteLine(String.Format("private static int[] GetAllIDsFromCache({0})", hasDeletedColumn ? "bool includeDeleted" : ""));
			writer.WriteLine("{");
			writer.WriteLine(String.Format("return Havit.Business.BusinessLayerContext.BusinessLayerCacheService.GetAllIDsFromCache(typeof({0}), GetAllIDsCacheKey({1}));",
				ClassHelper.GetClassName(table),
				hasDeletedColumn ? "includeDeleted" : ""));
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Přidá pole IDs metody GetAll do cache.");
			writer.WriteLine(String.Format("private static void AddAllIDsToCache(int[] ids{0})", hasDeletedColumn ? ", bool includeDeleted" : ""));
			writer.WriteLine("{");
			string cacheOptions = CacheHelper.WriteCacheOptionsCode(writer, table);
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.AddAllIDsToCache(typeof({0}), GetAllIDsCacheKey({1}), ids{2});",
				ClassHelper.GetClassName(table),
				hasDeletedColumn ? "includeDeleted" : "",
				String.IsNullOrEmpty(cacheOptions) ? "" : ", " + cacheOptions));
			writer.WriteLine("}");
			writer.WriteLine();

			if (!TableHelper.IsReadOnly(table))
			{
				writer.WriteCommentSummary("Odstraní pole IDs metody GetAll z cache.");
				writer.WriteLine("private static void RemoveAllIDsFromCache()");
				writer.WriteLine("{");
				if (hasDeletedColumn)
				{
					writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.RemoveAllIDsFromCache(typeof({0}), GetAllIDsCacheKey(true));", ClassHelper.GetClassName(table)));
					writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.RemoveAllIDsFromCache(typeof({0}), GetAllIDsCacheKey(false));", ClassHelper.GetClassName(table)));
				}
				else
				{
					writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.RemoveAllIDsFromCache(typeof({0}), GetAllIDsCacheKey());", ClassHelper.GetClassName(table)));
				}
				writer.WriteLine("}");
			}

			writer.WriteCloseRegion();
		}
	}

	private static void WriteCacheDependencyMethods(CodeWriter writer, Table table)
	{
		if (!TableHelper.IsReadOnly(table))
		{
			writer.WriteOpenRegion("Cache dependencies methods");

			writer.WriteCommentSummary("Vrátí klíč pro tvorbu závislostí cache na objektu. Při uložení objektu jsou závislosti invalidovány.");
			writer.WriteLine("public string GetSaveCacheDependencyKey(bool ensureInCache = true)");
			writer.WriteLine("{");
			writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Requires(!this.IsNew, \"!this.IsNew\");");
			writer.WriteHavitContract("");
			writer.WriteLine("if (!Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)");
			writer.WriteLine("{");
			writer.WriteLine("throw new InvalidOperationException(\"Použitá BusinessLayerCacheService nepodporuje cache dependencies.\");");
			writer.WriteLine("}");
			writer.WriteLine("");

			writer.WriteLine(String.Format("string key = \"BL|{0}|SaveDK|\" + this.ID;", CacheHelper.GetCacheKeyCore(table)));

			writer.WriteLine("");
			writer.WriteLine("if (ensureInCache)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.EnsureCacheDependencyKey(typeof({0}), key);", ClassHelper.GetClassName(table)));
			writer.WriteLine("}");
			writer.WriteLine("");
			writer.WriteLine("return key;");
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Odstraní z cache závislosti na klíči CacheDependencyKey.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("protected void InvalidateSaveCacheDependencyKey()");
			writer.WriteLine("{");
			writer.WriteLine("if (Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.InvalidateCacheDependencies(typeof({0}), GetSaveCacheDependencyKey(false));", ClassHelper.GetClassName(table)));
			writer.WriteLine("}");
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Vrátí klíč pro tvorbu závislostí cache. Po uložení jakéhokoliv objektu této třídy jsou závislosti invalidovány.");
			writer.WriteLine("public static string GetAnySaveCacheDependencyKey(bool ensureInCache = true)");
			writer.WriteLine("{");
			writer.WriteLine("if (!Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)");
			writer.WriteLine("{");
			writer.WriteLine("throw new InvalidOperationException(\"Použitá BusinessLayerCacheService nepodporuje cache dependencies.\");");
			writer.WriteLine("}");
			writer.WriteLine("");

			writer.WriteLine(String.Format("string key = \"BL|{0}|AnySaveDK\";", CacheHelper.GetCacheKeyCore(table)));
			writer.WriteLine("");

			writer.WriteLine("if (ensureInCache)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.EnsureCacheDependencyKey(typeof({0}), key);", ClassHelper.GetClassName(table)));
			writer.WriteLine("}");
			writer.WriteLine("");
			writer.WriteLine("return key;");
			writer.WriteLine("}");
			writer.WriteLine();

			writer.WriteCommentSummary("Odstraní z cache závislosti na klíči AnySaveCacheDependencyKey.");
			writer.WriteLine("[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
			writer.WriteLine("protected static void InvalidateAnySaveCacheDependencyKey()");
			writer.WriteLine("{");
			writer.WriteLine("if (Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("Havit.Business.BusinessLayerContext.BusinessLayerCacheService.InvalidateCacheDependencies(typeof({0}), GetAnySaveCacheDependencyKey(false));", ClassHelper.GetClassName(table)));
			writer.WriteLine("}");
			writer.WriteLine("}");

			writer.WriteCloseRegion();
		}
	}

	public static void WriteEnumClassMembers(CodeWriter writer, Table table)
	{
		if (TableHelper.GetEnumMode(table) != EnumMode.EnumClass)
		{
			return;
		}

		writer.WriteOpenRegion("Enum members");

		foreach (EnumMember enumMember in TableHelper.GetEnumMembers(table))
		{
			string comment = !String.IsNullOrEmpty(enumMember.Comment) ? enumMember.Comment : enumMember.MemberName;
			comment += String.Format(" [{0}]", enumMember.MemberID);

			writer.WriteCommentSummary(comment);
			writer.WriteLine(String.Format("public static {0} {1}", ClassHelper.GetClassName(table), enumMember.MemberName));
			writer.WriteLine("{");
			writer.WriteLine("get");
			writer.WriteLine("{");

			writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(ClassHelper.GetClassName(table)));
			writer.WriteMicrosoftContract("");

			writer.WriteLine(String.Format("return {0}.GetObject(EnumIDs.{1});", ClassHelper.GetClassName(table), enumMember.MemberName));
			writer.WriteLine("}");
			writer.WriteLine("}");
			writer.WriteLine();
		}

		writer.WriteCloseRegion();
	}

	public static void WriteEnumClassEnumIDs(CodeWriter writer, Table table)
	{
		if (TableHelper.GetEnumMode(table) != EnumMode.EnumClass)
		{
			return;
		}

		writer.WriteOpenRegion("EnumIDs (class)");
		writer.WriteCommentSummary("Konstanty ID objektů EnumClass.");
		writer.WriteLine("public static class EnumIDs");
		writer.WriteLine("{");
		foreach (EnumMember enumMember in TableHelper.GetEnumMembers(table))
		{
			string comment = !String.IsNullOrEmpty(enumMember.Comment) ? enumMember.Comment : enumMember.MemberName;
			comment += String.Format(" [{0}]", enumMember.MemberID);

			writer.WriteCommentSummary(comment);
			writer.WriteLine(String.Format("public const int {0} = {1};", enumMember.MemberName, enumMember.MemberID));
			writer.WriteLine();
		}
		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	public static void WriteGetFirst(CodeWriter writer, Table table)
	{
		string className = ClassHelper.GetClassName(table);
		string collectionClassName = ClassHelper.GetCollectionClassName(table);

		writer.WriteCommentSummary(String.Format("Vrátí první nalezený objekt typu {0} dle parametrů v queryParams.\nPokud není žádný objekt nalezen, vrací null.", className));
		writer.WriteLine(String.Format("public static {0} GetFirst(QueryParams queryParams)", className));
		writer.WriteLine("{");
		writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, \"queryParams != null\");");
		writer.WriteHavitContract("");
		writer.WriteMicrosoftContract("global::System.Diagnostics.Contracts.Contract.Requires(queryParams != null);");
		writer.WriteMicrosoftContract("");
		writer.WriteLine(String.Format("return {0}.GetFirst(queryParams, null);", className));
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteCommentSummary(String.Format("Vrátí první nalezený objekt typu {0} dle parametrů v queryParams.\nPokud není žádný objekt nalezen, vrací null. Data jsou načítána v předané transakci.", className));
		writer.WriteLine(String.Format("public static {0} GetFirst(QueryParams queryParams, DbTransaction transaction)", className));
		writer.WriteLine("{");
		writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, \"queryParams != null\");");
		writer.WriteHavitContract("");
		writer.WriteMicrosoftContract("global::System.Diagnostics.Contracts.Contract.Requires(queryParams != null);");
		writer.WriteMicrosoftContract("");
		writer.WriteLine("int? originalTopRecords = queryParams.TopRecords;");
		writer.WriteLine("queryParams.TopRecords = 1;");
		writer.WriteLine(String.Format("{0} getListResult = {1}.GetList(queryParams, transaction);", collectionClassName, className));
		writer.WriteLine("queryParams.TopRecords = originalTopRecords;");
		writer.WriteLine("return (getListResult.Count == 0) ? null : getListResult[0];");
		writer.WriteLine("}");
		writer.WriteLine();
	}

	public static void WriteGetLists(CodeWriter writer, Table table)
	{
		string className = ClassHelper.GetClassName(table);
		string memberName = ConventionsHelper.GetCammelCase(className);

		string collectionClassName = ClassHelper.GetCollectionClassName(table);

		writer.WriteCommentSummary(String.Format("Vrátí objekty typu {0} dle parametrů v queryParams.", className));
		writer.WriteLine(String.Format("internal static {0} GetList(QueryParams queryParams)", collectionClassName));
		writer.WriteLine("{");

		writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, \"queryParams != null\");");
		writer.WriteHavitContract("");
		writer.WriteMicrosoftContract("global::System.Diagnostics.Contracts.Contract.Requires(queryParams != null);");
		writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(collectionClassName));
		writer.WriteMicrosoftContract("");

		writer.WriteLine(String.Format("return {0}.GetList(queryParams, null);", className));
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteCommentSummary(String.Format("Vrátí objekty typu {0} dle parametrů v queryParams. Data jsou načítána v předané transakci.", className));
		writer.WriteLine(String.Format("internal static {0} GetList(QueryParams queryParams, DbTransaction transaction)", collectionClassName));
		writer.WriteLine("{");

		writer.WriteHavitContract("global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, \"queryParams != null\");");
		writer.WriteHavitContract("");
		writer.WriteMicrosoftContract("global::System.Diagnostics.Contracts.Contract.Requires(queryParams != null);");
		writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(collectionClassName));
		writer.WriteMicrosoftContract("");

		writer.WriteLine(String.Format("DbCommand dbCommand = {0}.ProviderFactory.CreateCommand();", DatabaseHelper.GetDbConnector()));
		writer.WriteLine("dbCommand.Transaction = transaction;");
		writer.WriteLine();

		writer.WriteLine(String.Format("queryParams.ObjectInfo = {0}.ObjectInfo;", ClassHelper.GetClassName(table)));
		writer.WriteLine("if (queryParams.Properties.Count > 0)");
		writer.WriteLine("{");
		writer.WriteLine(String.Format("queryParams.Properties.Add({0}.Properties.ID);", ClassHelper.GetClassName(table)));
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteLine(String.Format("queryParams.PrepareCommand(dbCommand, SqlServerPlatform.{0}, CommandBuilderOptions.None);",
			GeneratorSettings.TargetPlatform)); // 0

		writer.WriteLine(String.Format("return {0}.GetList(dbCommand, queryParams.GetDataLoadPower());", className));
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteLine(String.Format("private static {0} GetList(DbCommand dbCommand, DataLoadPower dataLoadPower)", collectionClassName));
		writer.WriteLine("{");
		writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(collectionClassName));
		writer.WriteMicrosoftContract("");
		writer.WriteLine("if (dbCommand == null)");
		writer.WriteLine("{");
		writer.WriteLine("throw new ArgumentNullException(\"dbCommand\");");
		writer.WriteLine("}");
		writer.WriteLine();

		writer.WriteLine(String.Format("{0} result = new {0}();", collectionClassName));
		writer.WriteLine();
		writer.WriteLine(String.Format("using (DbDataReader reader = {0}.ExecuteReader(dbCommand))", DatabaseHelper.GetDbConnector()));
		writer.WriteLine("{");
		writer.WriteLine("while (reader.Read())");
		writer.WriteLine("{");
		writer.WriteLine("DataRecord dataRecord = new DataRecord(reader, dataLoadPower);");
		writer.WriteLine(String.Format("{0} {1} = {0}.GetObject(dataRecord);", className, memberName));
		if (TableHelper.IsCachable(table) && !TableHelper.CanCacheBusinessObjectInstances(table))
		{
			writer.WriteLine("if (dataLoadPower == DataLoadPower.FullLoad)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("{0}.AddDataRecordToCache(dataRecord);", memberName));
			writer.WriteLine("}");
		}
		writer.WriteLine(String.Format("result.Add({0});", memberName));
		writer.WriteLine("}");
		writer.WriteLine("}");
		writer.WriteLine();
		writer.WriteLine("return result;");
		writer.WriteLine("}");
		writer.WriteLine();
	}

	public static void WriteGetAlls(CodeWriter writer, Table table)
	{
		string className = ClassHelper.GetClassName(table);
		string collectionClassName = ClassHelper.GetCollectionClassName(table);

		bool hasDeletedColumn = TableHelper.GetDeletedColumn(table) != null;
		bool isCached = TableHelper.IsCachable(table);
		//bool isReadOnly = TableHelper.IsReadOnly(table);

		if (isCached)
		{
			writer.WriteLine("private static object lockGetAllCacheAccess = new object();");
			writer.WriteLine();
		}

		if (hasDeletedColumn)
		{
			// metoda GetAll()
			writer.WriteCommentSummary(String.Format("Vrátí všechny (příznakem) nesmazané objekty typu {0}.", className));
			writer.WriteLine(String.Format("public static {0} GetAll()", collectionClassName));
			writer.WriteLine("{");
			writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(collectionClassName));
			writer.WriteMicrosoftContract("");
			writer.WriteLine(String.Format("return {0}.GetAll(false);", className));
			writer.WriteLine("}");
			writer.WriteLine();

			// hlavička metody GetAll(bool)
			writer.WriteCommentSummary(String.Format("Vrátí všechny objekty typu {0}. Parametr udává, zda se mají vrátit i (příznakem) smazané záznamy.", className));
			writer.WriteLine(String.Format("public static {0} GetAll(bool includeDeleted)", collectionClassName));
			writer.WriteLine("{");
		}
		else
		{
			// hlavička metody GetAll()
			writer.WriteCommentSummary(String.Format("Vrátí všechny objekty typu {0}.", className));
			writer.WriteLine(String.Format("public static {0} GetAll()", collectionClassName));
			writer.WriteLine("{");
		}

		writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(collectionClassName));
		writer.WriteMicrosoftContract("");

		WriteGetAllLocalizations(writer, table);

		List<string> code = new List<string>();
		code.Add("QueryParams queryParams = new QueryParams();");
		if (hasDeletedColumn)
		{
			code.Add("queryParams.IncludeDeleted = includeDeleted;");
		}

		string sorting = ExtendedPropertiesHelper.GetString(ExtendedPropertiesKey.FromTable(table), "GetAll_Sorting");
		if (!String.IsNullOrEmpty(sorting))
		{
			try
			{
				string[] sortItems = sorting.Trim().Split(new char[] { ',' });
				foreach (string sortItem in sortItems)
				{
					string direction = "Ascending";
					string columnName = sortItem.Trim();
					if (columnName.ToUpper().EndsWith(" DESC"))
					{
						direction = "Descending";
						columnName = columnName.Substring(0, columnName.Length - " DESC".Length);
					}
					else
					{
						if (columnName.ToUpper().EndsWith(" ASC"))
						{
							columnName = columnName.Substring(0, columnName.Length - " ASC".Length);
						}
					}

					Column column = table.FindColumn(columnName);

					code.Add(
						String.Format("queryParams.OrderBy.Add({0}.Properties.{1}, SortDirection.{2});",
							ClassHelper.GetClassName(table),
							PropertyHelper.GetPropertyName(column),
							direction));
				}

			}
			catch (Exception e)
			{
				throw new ApplicationException(String.Format("Tabulka {0}: Chyba při zpracování extended property GetAll_Sorting ({1}).", table.Name, sorting), e);
			}
		}

		code.Add(String.Format("collection = {0}.GetList(queryParams);", className));

		writer.WriteLine(String.Format("{0} collection = null;", collectionClassName));
		if (isCached)
		{
			writer.WriteLine("int[] ids = null;");
			writer.WriteLine();
			writer.WriteLine(String.Format("ids = GetAllIDsFromCache({0});", hasDeletedColumn ? "includeDeleted" : ""));
			writer.WriteLine("if (ids == null)");
			writer.WriteLine("{");
			writer.WriteLine("lock (lockGetAllCacheAccess)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("ids = GetAllIDsFromCache({0});", hasDeletedColumn ? "includeDeleted" : ""));
			writer.WriteLine("if (ids == null)");
			writer.WriteLine("{");
			writer.WriteLines(code.ToArray());
			writer.WriteLine("ids = collection.GetIDs();");
			writer.WriteLine();
			writer.WriteLine(String.Format("AddAllIDsToCache(ids{0});", hasDeletedColumn ? ", includeDeleted" : ""));
			writer.WriteLine("}");
			writer.WriteLine("}");
			writer.WriteLine("}");

			writer.WriteLine("if (collection == null)");
			writer.WriteLine("{");
			writer.WriteLine(String.Format("collection = new {0}();", ClassHelper.GetCollectionClassName(table)));
			writer.WriteLine(String.Format("collection.AddRange({0}.GetObjects(ids));", ClassHelper.GetClassName(table)));
			writer.WriteLine("collection.LoadAll();");
			writer.WriteLine("}");
			writer.WriteLine();
			writer.WriteLine("return collection;");
		}
		else
		{
			writer.WriteLines(code.ToArray());
			writer.WriteLine("return collection;");
		}

		// konec metody GetAll() nebo GetAll(bool)
		writer.WriteLine("}");
		writer.WriteLine();

	}

	public static void WriteGetAllLocalizations(CodeWriter writer, Table table)
	{
		if (LocalizationHelper.IsLocalizedTable(table))
		{
			if (TableHelper.GetGetAllIncludeLocalizations(table))
			{
				Table localizationTable = LocalizationHelper.GetLocalizationTable(table);
				writer.WriteLine(String.Format("{0}.GetAll();", ClassHelper.GetClassName(localizationTable)));
				writer.WriteLine();
			}
		}
	}

	public static void WriteToString(CodeWriter writer, Table table)
	{
		string className = ClassHelper.GetClassName(table);

		writer.WriteOpenRegion("ToString");
		writer.WriteCommentSummary("Returns a string that represents the current object.");
		writer.WriteLine("public override string ToString()");
		writer.WriteLine("{");

		if (!TableHelper.IsReadOnly(table))
		{
			writer.WriteLine("if (IsNew)");
			writer.WriteLine("{");
			writer.WriteLine($"return \"{className}(New)\";");
			writer.WriteLine("}");
			writer.WriteLine();
		}

		if (TableHelper.GetEnumMode(table) == EnumMode.EnumClass)
		{
			List<EnumMember> enumMembers = TableHelper.GetEnumMembers(table);

			writer.WriteLine("switch (this.ID)");
			writer.WriteLine("{");

			foreach (EnumMember enumMember in enumMembers)
			{
				writer.WriteLine($"case EnumIDs.{enumMember.MemberName}: return \"{className}.{enumMember.MemberName}\";");
			}

			writer.WriteLine("}");
			writer.WriteLine();
		}
		writer.WriteLine(String.Format("return String.Format(\"{0}(ID={{0}})\", this.ID);", className));

		writer.WriteLine("}");
		writer.WriteCloseRegion();
	}

	public static void WriteObjectInfo(CodeWriter writer, Table table)
	{
		writer.WriteOpenRegion("ObjectInfo");
		writer.WriteCommentSummary(String.Format("Objektová reprezentace metadat typu {0}.", ClassHelper.GetClassName(table)));
		writer.WriteLine("public static ObjectInfo ObjectInfo");
		writer.WriteLine("{");
		writer.WriteLine("get");
		writer.WriteLine("{");
		writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull("ObjectInfo"));
		writer.WriteMicrosoftContract("");
		writer.WriteLine("return objectInfo;");
		writer.WriteLine("}");
		writer.WriteLine("}");
		writer.WriteLine("private static ObjectInfo objectInfo;");
		writer.WriteCloseRegion();
	}

	public static void WritePropertiesInfo(CodeWriter writer, Table table)
	{
		writer.WriteOpenRegion("Properties");
		writer.WriteCommentSummary(String.Format("Objektová reprezentace metadat vlastností typu {0}.", ClassHelper.GetClassName(table)));
		writer.WriteLine(String.Format("public static {0} Properties", ClassHelper.GetPropertiesClassName(table)));
		writer.WriteLine("{");
		writer.WriteLine("get");
		writer.WriteLine("{");
		writer.WriteMicrosoftContract(ContractHelper.GetEnsuresResultNotNull(ClassHelper.GetPropertiesClassName(table)));
		writer.WriteMicrosoftContract("");
		writer.WriteLine("return properties;");
		writer.WriteLine("}");
		writer.WriteLine("}");
		writer.WriteLine(String.Format("private static {0} properties;", ClassHelper.GetPropertiesClassName(table)));

		writer.WriteCloseRegion();
	}

	private static void WriteInsertMNCollectionData(CodeWriter writer, Table table, CollectionProperty collectionProperty, string queryBuilderVariableName)
	{
		BusinessObjectSqlParameter.WriteCollectionSqlParameter(writer, collectionProperty);
		writer.WriteLine();
		//if (GeneratorSettings.TargetPlatform >= TargetPlatform.SqlServer2008)
		//{
		writer.WriteLine(String.Format("{5}.Append(\"INSERT INTO {0} ({1}, {2}) SELECT @{3} AS {1}, Value AS {2} FROM @{4}; \");",
			TableHelper.GetFullTableName(collectionProperty.JoinTable), // 0
			collectionProperty.ReferenceColumn.Name, // 1
			TableHelper.GetSecondColumn(collectionProperty.JoinTable, collectionProperty.ReferenceColumn).Name, // 2
			TableHelper.GetPrimaryKey(table).Name, // 3
			collectionProperty.PropertyName, // 4
			queryBuilderVariableName)); // 5
										//}
										//else
										//{
										//	writer.WriteLine("// OPTION (RECOMPILE): workaround pro http://connect.microsoft.com/SQLServer/feedback/ViewFeedback.aspx?FeedbackID=256717");
										//	writer.WriteLine(String.Format("{5}.Append(\"INSERT INTO {0} ({1}, {2}) SELECT @{3} AS {1}, Value AS {2} FROM dbo.IntArrayToTable(@{4}) OPTION (RECOMPILE); \");",
										//		TableHelper.GetFullTableName(collectionProperty.JoinTable), // 0
										//		collectionProperty.ReferenceColumn.Name, // 1
										//		TableHelper.GetSecondColumn(collectionProperty.JoinTable, collectionProperty.ReferenceColumn).Name, // 2
										//		TableHelper.GetPrimaryKey(table).Name, // 3
										//		collectionProperty.PropertyName, // 4
										//		queryBuilderVariableName)); // 5
										//}					
	}

	private static void WriteClone(CodeWriter writer, Table table)
	{
		if (!TableHelper.IsReadOnly(table) && TableHelper.GetCloneMethod(table))
		{
			List<string> klonovaneVlastnosti = new List<string>();
			List<string> neklonovaneVlastnosti = new List<string>();
			foreach (Column column in TableHelper.GetPropertyColumns(table))
			{
				if (ColumnHelper.IsReadOnly(column))
				{
					continue;
				}

				CloneMode cloneMode = ColumnHelper.GetCloneMode(column);
				if (cloneMode != CloneMode.No)
				{
					if (TypeHelper.IsBusinessObjectReference(column))
					{
						klonovaneVlastnosti.Add(String.Format("{0} ({1})", PropertyHelper.GetPropertyName(column), cloneMode));
					}
					else
					{
						klonovaneVlastnosti.Add(PropertyHelper.GetPropertyName(column));
					}
				}
				else
				{
					neklonovaneVlastnosti.Add(PropertyHelper.GetPropertyName(column));
				}
			}
			foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
			{
				if (collectionProperty.CloneMode != CloneMode.No)
				{
					klonovaneVlastnosti.Add(String.Format("{0} ({1})", collectionProperty.PropertyName, collectionProperty.CloneMode));
				}
				else
				{
					neklonovaneVlastnosti.Add(collectionProperty.PropertyName);
				}
			}

			writer.WriteOpenRegion("Clone");
			writer.WriteCommentLine("<summary>");
			writer.WriteCommentLine("Klonuje objekt - vrací instanci nového objektu se shodně nastavenými hodnotami perzistentních vlastností.");
			if (klonovaneVlastnosti.Count > 0)
			{
				writer.WriteLine("///");
				writer.WriteCommentLine("Klonované vlastnosti:<br />");
				foreach (string item in klonovaneVlastnosti)
				{
					writer.WriteCommentLine(" - " + item + "<br />");
				}
			}
			if (neklonovaneVlastnosti.Count > 0)
			{
				writer.WriteLine("///");
				writer.WriteCommentLine("Neklonované vlastnosti:<br />");
				foreach (string item in neklonovaneVlastnosti)
				{
					writer.WriteCommentLine(" - " + item + "<br />");
				}
			}
			writer.WriteCommentLine("</summary>");

			string methodAccessModifier = TableHelper.GetCloneMethodAccessModifier(table);
			writer.WriteLine(String.Format("{0}{1} {2} Clone()",
				methodAccessModifier, // 0
				methodAccessModifier == "private" ? "" : " virtual", // 1
				ClassHelper.GetClassName(table))); // 2
			writer.WriteLine("{");
			writer.WriteLine("EnsureLoaded();");
			writer.WriteLine();

			writer.WriteLine(String.Format("{0} clone = {0}.CreateObject();", ClassHelper.GetClassName(table)));
			foreach (Column column in TableHelper.GetPropertyColumns(table))
			{
				if (ColumnHelper.IsReadOnly(column))
				{
					continue;
				}
				CloneMode cloneMode = ColumnHelper.GetCloneMode(column);
				if (cloneMode != CloneMode.No)
				{
					if ((TypeHelper.IsBusinessObjectReference(column)) && (cloneMode == CloneMode.Deep))
					{
						writer.WriteLine(String.Format("clone.{0}.Value = (this.{0}.Value == null) ? null : this.{0}.Value.Clone();", PropertyHelper.GetPropertyHolderName(column)));
					}
					else
					{
						writer.WriteLine(String.Format("clone.{0}.Value = this.{0}.Value;", PropertyHelper.GetPropertyHolderName(column)));
					}
				}
			}

			foreach (CollectionProperty collectionProperty in TableHelper.GetCollectionColumns(table))
			{
				if (collectionProperty.CloneMode != CloneMode.No)
				{
					if (collectionProperty.IsOneToMany && collectionProperty.CloneMode == CloneMode.Shallow)
					{
						ConsoleHelper.WriteLineWarning("Tabulka {0}: Kolekce {1} je typu 1:N a má nastaveno klonování typu Shallow, což není podporováno.", table.Name, collectionProperty.PropertyName);
						continue;
					}

					if (collectionProperty.CloneMode == CloneMode.Shallow)
					{
						writer.WriteLine(String.Format("clone.{0}.Value.AddRange(this.{0}.Value);", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
					}

					if (collectionProperty.CloneMode == CloneMode.Deep)
					{
						writer.WriteLine(String.Format("this.{0}.Value.LoadAll();", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
						writer.WriteLine(String.Format("clone.{0}.Value.AddRange(this.{0}.Value.Select(item => item.Clone()));", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName)));
						if (collectionProperty.IsOneToMany)
						{
							writer.WriteLine(String.Format("clone.{0}.Value.ForEach(item => item.{1}.Value = clone);", PropertyHelper.GetPropertyHolderName(collectionProperty.PropertyName), PropertyHelper.GetPropertyHolderName(PropertyHelper.GetPropertyName(collectionProperty.ReferenceColumn))));
						}
					}
				}
			}
			writer.WriteLine("return clone;");

			writer.WriteLine("}");
			writer.WriteCloseRegion();
		}
	}

	//private static void WriteSetProperty(CodeWriter writer, Table table)
	//{

	//	writer.WriteOpenRegion("SetProperty");
	//	writer.WriteCommentSummary("Nastaví hodnotu vlastnosti. Určeno pro účely psaní unit testů s readonly objekty (nemají settery).");
	//	writer.WriteLine("private void SetProperty(string propertyName, object value)");
	//	writer.WriteLine("{");

	//	writer.WriteLine("if (!this.IsLoaded)");
	//	writer.WriteLine("{");
	//	writer.WriteLine("throw new InvalidOperationException(\"SetProperty nelze volat na ghost objektu. Objekt musí být nejprve přepnut do stavu Disconnected.\");");
	//	writer.WriteLine("}");
	//	writer.WriteLine();

	//	writer.WriteLine("switch (propertyName)");
	//	writer.WriteLine("{");

	//	foreach (Column column in TableHelper.GetPropertyColumns(table))
	//	{
	//		string propertyName = PropertyHelper.GetPropertyName(column);
	//		string propertyHolderName = PropertyHelper.GetPropertyHolderName(column);
	//		string propertyTypeName = TypeHelper.GetPropertyTypeName(column);

	//		writer.WriteLine($"case \"{propertyName}\":");
	//		writer.Indent();
	//		writer.WriteLine($"{propertyHolderName}.Value = ({propertyTypeName})value;");
	//		writer.WriteLine("break;");
	//		writer.Unindent();
	//		writer.WriteLine();
	//	}

	//	writer.WriteLine("default: throw new InvalidOperationException($\"Vlastnosti '{propertyName}' nelze nastavit hodnotu.\");");
	//	writer.WriteLine("}");

	//	writer.WriteLine("}");
	//	writer.WriteCloseRegion();
	//}
}
