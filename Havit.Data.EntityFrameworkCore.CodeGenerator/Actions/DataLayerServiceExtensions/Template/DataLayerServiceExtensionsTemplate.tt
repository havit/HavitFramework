<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Havit.Data.EntityFrameworkCore.CodeGenerator.Actions.DataEntries.Model" #>
<#@ import namespace="Havit.Data.EntityFrameworkCore.CodeGenerator.Actions.DataSources.Model" #>
<#@ import namespace="Havit.Data.EntityFrameworkCore.CodeGenerator.Actions.Repositories.Model" #>
<#@ include file="..\..\AutoGenerated.tt"#>

using Havit.Data.EntityFrameworkCore.Patterns.DependencyInjection;
using Havit.Data.EntityFrameworkCore.Patterns.Infrastructure;
using Havit.Data.EntityFrameworkCore.Patterns.Repositories;
using Havit.Data.Patterns.DataEntries;
using Havit.Data.Patterns.DataSources;
using Havit.Data.Patterns.Infrastructure;
using Havit.Data.Patterns.Repositories;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace <#= Model.NamespaceName #>;

[System.CodeDom.Compiler.GeneratedCode("Havit.Data.EntityFrameworkCore.CodeGenerator", "1.0")]
public static partial class DataLayerServiceExtensions
{
	public static IServiceCollection AddDataLayerServices(this IServiceCollection services, ComponentRegistrationOptions options = null)
	{
		services.AddDataLayerCoreServices(options);
	
		AddDataSources(services);
		AddRepositories(services);
		AddDataEntries(services);
		AddEntityKeyAccessors(services);

		return services;
	}

	private static void AddDataSources(IServiceCollection services)
	{
<# foreach (DbDataSourceModel dataSourceModel in Model.DataSources) { #>
		services.TryAddTransient<<#= dataSourceModel.NamespaceName #>.<#= dataSourceModel.InterfaceDataSourceFullName #>, <#= dataSourceModel.NamespaceName #>.<#= dataSourceModel.DbDataSourceClassName #>>();
		services.TryAddTransient<IDataSource<<#= dataSourceModel.ModelClassFullName#>>, <#= dataSourceModel.NamespaceName #>.<#= dataSourceModel.DbDataSourceClassName #>>();

<# } #>
	}

	private static void AddRepositories(IServiceCollection services)
	{
<# foreach (RepositoryModel repositoryModel in Model.Repositories) { #>
		services.TryAddScoped<<#= repositoryModel.NamespaceName #>.<#= repositoryModel.InterfaceRepositoryName#>, <#= repositoryModel.NamespaceName #>.<#= repositoryModel.DbRepositoryName #>>();
		services.TryAddScoped<IRepository<<#= repositoryModel.ModelClassFullName #>, <#= repositoryModel.ModelClassPrimaryKeyTypeName #>>>(sp => sp.GetRequiredService<<#= repositoryModel.NamespaceName #>.<#= repositoryModel.InterfaceRepositoryName#>>());
<# if (repositoryModel.ModelClassPrimaryKeyIsInt32) { #>
		services.TryAddScoped<IRepository<<#= repositoryModel.ModelClassFullName #>>>(sp => sp.GetRequiredService<<#= repositoryModel.NamespaceName #>.<#= repositoryModel.InterfaceRepositoryName#>>());
<# } // if #>
		services.TryAddSingleton<IRepositoryQueryProvider<<#= repositoryModel.ModelClassFullName #>, <#= repositoryModel.ModelClassPrimaryKeyTypeName #>>, <#= repositoryModel.NamespaceName #>.<#= repositoryModel.RepositoryQueryProviderClassName #>>();

<# } // foreach #>
	}

	private static void AddDataEntries(IServiceCollection services)
	{
<# foreach (DataEntriesModel dataEntriesModel in Model.DataEntries) { #>
		services.TryAddScoped<<#= dataEntriesModel.NamespaceName #>.<#= dataEntriesModel.InterfaceName #>, <#= dataEntriesModel.NamespaceName #>.<#= dataEntriesModel.DbClassName #>>();
<# if (dataEntriesModel.UseDataEntrySymbolStorage) { #>
		services.TryAddTransient<IDataEntrySymbolService<<#= dataEntriesModel.ModelClassFullName #>, <#= dataEntriesModel.ModelClassPrimaryKeyTypeName #>>, DataEntrySymbolService<<#= dataEntriesModel.ModelClassFullName #>, <#= dataEntriesModel.ModelClassPrimaryKeyTypeName #>>>();
		services.TryAddSingleton<IDataEntrySymbolStorage<<#= dataEntriesModel.ModelClassFullName #>, <#= dataEntriesModel.ModelClassPrimaryKeyTypeName #>>, DataEntrySymbolStorage<<#= dataEntriesModel.ModelClassFullName #>, <#= dataEntriesModel.ModelClassPrimaryKeyTypeName #>>>();
<# } #>

<# } #>
	}

	private static void AddEntityKeyAccessors(IServiceCollection services)
	{
<# foreach (RepositoryModel repositoryModel in Model.Repositories) { #>
		services.TryAddTransient<IEntityKeyAccessor<<#= repositoryModel.ModelClassFullName #>, <#= repositoryModel.ModelClassPrimaryKeyTypeName #>>, DbEntityKeyAccessor<<#= repositoryModel.ModelClassFullName #>, <#= repositoryModel.ModelClassPrimaryKeyTypeName #>>>();
<# } #>
	}
}
